.. comment: -*- mode:rst; coding:utf-8 -*-


--------------------------------------
NASIUM LSE - NOTES D'IMPLEMENTATION
--------------------------------------

DONE
====

- In cli, allow CR to work just like C-s
  --> option: --entree-comme-xoff | --return-is-xoff

TODO
====


- formating documentation: dash lists items 2-n are indented and
  should not.


- Make a #+clisp clisp-terminal using EXT:WITH-KEYBOARD-INPUT (and
  perhaps SCREEN). Should work both on unix and MS-Windows.

- Make a windows-console-terminal class to run in MS-Windows console.

- Implement the server main program, with options.

- Revise server configuration (see SYSTEMS.TXT) and implement.

- Write server documentation chapters.

- Voir si on ajoute un token <- pour _.

- server iolib-util: the write handler should be activated only when
  we have something to write, and it should be deactivated when we're
  done writing, otherwise it goes CPU bound (polling).
  make-writer-maker
#+(or lse-unix lse-t1600)


LIRE
====

- un sifflement par instruction LIRE.

- valeur numérique assignée à la variable à la lecture de X-OFF ou
  SPC.

- valeur chaîne assignée à la variable à la lecture de X-OFF ou RET
  sur Mitra-15 (mais RET inclus).

AFFICHER
========

- chaînes affichées telles quelles.

- nombres affichés suivi d'un espace.




NOTES
=====

    - iolib on MS-Windows: <fe[nl]ix> pjb: you can use hlavaty's port

    - PRendre etat console
        Mitra-15: copie le programme, les variables, et les fichiers
        temporaires.
        TRANSFERT FICHIERS TEMPORAIRES IMPOSSIBLE
        !! Avec des threads, il faut bloquer les threads de la console source !!

    - Programmmes à execution seule ? (Il faut l'ID du pgm pour le lister).



LEXER,PARSER
------------

> maybe i don't understand the problem but there is a nice (and fast
> ;-) lexer in Michael Parkers CLAWK package. It is very portable (i
> tested it on CMUCL, CLisp, LWW & Corman) and produce (as Michael
> said) output that is compatible to parsers from LispWorks parser
> generator tool.

Indeed, they work nicely together.  A simple example: ::

    (defpackage "CALC"
      (:use "COMMON-LISP" "LEXER" "PARSERGEN")
      (:export "CALC"))

    (in-package "CALC")

    (deflexer lex
      ("[:digit:]+" (return (values 'number (num %0))))
      ("\\+" (return 'plus))
      ("-" (return 'minus))
      ("\\*" (return 'times))
      ("/" (return 'div))
      ("\\(" (return 'lparen))
      ("\\)" (return 'rparen))
      ("[:space:]+"))

    (defparser parse
      ((expr sum) $1)
      ((sum sum plus mult) `(+ ,$1 ,$3))
      ((sum sum minus mult) `(- ,$1 ,$3))
      ((sum mult) $1)
      ((mult mult times atom) `(* ,$1 ,$3))
      ((mult mult div atom) `(/ ,$1 ,$3))
      ((mult atom) $1)
      ((atom minus atom) `(- ,$2))
      ((atom plus atom) `(+ ,$2))
      ((atom number) $1)
      ((atom lparen sum rparen) $2))

    (defun calc ()
      (eval (parse (lex (read-line)))))

    CL-USER 29 > (calc:calc)
    -(2 + 3 * -5) * 4 / 13
    4

IMHO lexing is one of the (maybe exceptional) cases where regular
expressions are simply the Right Thing.


LSE Grammar
=============

::

    start ::= ligne_programme | instruction | '?' expression .



    numero ::= chiffre {chiffre} .
    nombre ::= chiffre {chiffre} [ . {chiffre} ]
                [ 'E' ['+'|'-'] chiffre {chiffre} ] .

    chaine ::= "'" { caractere_sauf_quote | "''" } "'" .

    identificateur ::= [ '&' ] lettre { lettre | chiffre } .


    expression  ::= expression ['-'|'+'|'!'] terme_signe .
    expression  ::= terme_signe .

    terme_signe ::= '-' terme .
    terme_signe ::= terme .

    terme       ::= terme ['*'|'/'] facteur .
    terme       ::= facteur .

    facteur     ::= facteur '^' exposant .
    facteur     ::= simple .

    simple      ::= identificateur '(' [ expression  { ',' expression } ] ')' .
    simple      ::= identificateur .
    simple      ::= nombre .
    simple      ::= chaine .
    simple      ::= '(' expression ')' .



    disjonction ::= conjonction { 'OU' conjonction } .
    conjonction ::= condition   { 'ET' condition   } .
    condition   ::= 'NON' condition .
    condition   ::= '(' disjonction ')' .
    condition   ::= comparaison .
    comparaison ::= expression [ '<'|'<='|'#'|'='|'>='|'>' ] expression .


    ligne_programme ::= numero ' ' liste_instruction 'X-OFF' .
    ligne_programme ::= numero '*' commentaire 'X-OFF' .
    ligne_programme ::= numero declaration_procedure { ';' instruction } .
    commentaires    ::= { caractere } .

    liste_instruction ::= instruction|declaration { ';' instruction|declaration } .

    declaration     ::= declaration_chaine | declaration_tableau .
    instruction     ::= liberation
                    | lire | afficher | alleren | sialors | sialorssinon
                    | terminer | pause | debutfin | fairejusqua | fairetantque
                    | retour | resultat | appel
                    | garer | charger | supprimer | executer .



    declaration_chaine ::= 'CHAINE' identificateur { ',' identificateur } .

    declaration_tableau ::= 'TABLEAU'
                            identificateur '[' expression [ ',' expression ] ']'
                     { ','  identificateur '[' expression [ ',' expression ] ']' } .

    liberation  ::= 'LIBERER' identificateur .

    declaration_procedure ::= 'PROCEDURE' identificateur
                                '(' [ identificateur { ',' identificateur } ] ')'
                                [ 'LOCAL' identificateur { ',' identificateur } ] .

    affectation ::= identificateur [ '[' expression [ ',' expression ] ']' ]
                        '_' expression .


    lire            ::= 'LIRE' identificateur { ',' identificateur } .
    afficher        ::= 'AFFICHER'          expression { ',' expression } .
    afficher        ::= 'AFFICHER' format [ expression { ',' expression } ] .
    format          ::= '[' specification { ',' specification } ']'
    specification   ::= [ numero | '*' ] '/' | 'X' | 'C' | 'L' | chaine .
    specification   ::= [ numero ] 'F' numero '.' numero | 'E' numero '.' numero
                                   | 'U' .
    alleren         ::= 'ALLER' 'EN' expression .
    sialors         ::= 'SI' disjonction 'ALORS' instruction .
    sialorssinon    ::= 'SI' disjonction 'ALORS' instruction 'SINON' instruction .
    terminer        ::= 'TERMINER' .
    pause           ::= 'PAUSE' .
    debutfin        ::= 'DEBUT' instruction { ',' instruction } 'FIN' .
    fairejusqua     ::= 'FAIRE' numero 'POUR' identificateur '_' expression
                            [ 'PAS' expression ] 'JUSQUA' expression .
    fairetantque    ::= 'FAIRE' numero 'POUR' identificateur '_' expression
                            [ 'PAS' expression ] 'TANT' 'QUE' disjonction .
    retour          ::= 'RETOUR' .
    retour          ::= 'RETOUR' 'EN' expression .
    resultat        ::= 'RESULTAT' expression .
    appel           ::= identificateur '(' [ expression { ',' expression } ] ')' .

    garer           ::= 'GARER'   identificateur ',' expression ',' expression .
    charger         ::= 'CHARGER' identificateur ',' expression ',' expression
                            [ ',' identificateur ] .
    supprimer       ::= 'SUPPRIMER' expression [ ',' expression ] .
    executer        ::= 'EXECUTER' expression [ ',' expression ] .




COMMON-LISP Implementation
==========================

    We'll minimize the  CL implementation  specific  dependencies.

    Each task will be implemented in its own UNIX process.
    A server process will listen to the socket,
    and will fork a new console process of each incoming session.

    A pipe between the server process and the console process will be
    established to allow for the transfer of state (PRENDRE ETAT CONSOLE)
    between the consoles.


Catalogue:
----------

    - Les liens symboliques dans le répertoire LSE ne sont pas admis.

      (Common-Lisp DIRECTORY returns TRUENAME, which unix CL implementations
       generally understand as the target path).


Terminal I/O
------------

    Since we don't have several threads, we must do polling I/O.

    clisp provide extension functions for raw keyboard input.

    ESC --> stop current processing and revert to top-level repl
            (note: execution of a running program could be continued with
            the CONTINUE or ALLER A commands).

    Ctrl-A --> the signal should be recoded asynchronously for the
               ATT() function.

    The only way to implement BOTH these features portably on unix
    without threads seems to be with the use of an embedded virtual
    machine where we could implement virtual threads or at least:

        (loop
          (process-input (read-char-no-hang))
          (execute-one-instruction))


    If ESC is mapped to SIGINT, this is caught by clisp as a "User
    Break", ie. system::simple-interrupt-condition, which can be
    handled programmatically with handler-bind or handler-case.


    (catch :exit
      (let ((*status* :out) (counter 1)) (declare (special *status*))
           (handler-bind
            ((system::simple-interrupt-condition
              (lambda (condition)
                (print (list :interupted *status* counter))
                (decf counter)
                (when (zerop counter) (throw :exit nil))
                nil)))
            (let ((*status* :in)) (declare (special *status*)) (loop)))))

    --> (:INTERUPTED :IN 1)


    (catch :exit
      (let ((*status* :out) (counter 1)) (declare (special *status*))
        (handler-case (let ((*status* :in)) (declare (special *status*)) (loop))
          (system::interrupt-condition
           (condition)
           (print (list :interupted *status* counter))
           (decf counter)
           (when (zerop counter) (throw :exit nil))))))

    --> (:INTERUPTED :OUT 1)


    Conclusion:  Implement ESC with stty -intr ESC
                 and don't implement Ctrl-A/ATT().



(defun make-xterm-io-stream ()
  (let* ((pipe (with-open-stream (s (make-pipe-input-stream
                                     "mktemp /tmp/clisp-x-io-XXXXXX"))
                 (read-line s)))
        (title "CLISP I/O")
         tty-name xio
         (clos::*warn-if-gf-already-called* nil))
    (shell (format nil "rm -f ~a; mknod ~a p; ~
                   xterm -n ~s -T ~s -e 'tty >> ~a; cat ~a' &"
                   pipe pipe title title pipe pipe))
    (setq tty-name
          (with-open-file (s pipe :direction :input) (read-line s))
          xio (make-two-way-stream
               (open tty-name :direction :input)
               (open tty-name :direction :output)))
    (defmethod close :after ((x (eql xio)) &rest junk)
      (declare (ignore x junk))
      (with-open-file (s pipe :direction :output)
        (write-line (TEXT "Bye.") s))
      (delete-file pipe)
      (close (two-way-stream-input-stream xio))
      (close (two-way-stream-output-stream xio))
      (let ((clos::*warn-if-gf-already-called* nil))
        (remove-method #'close (find-method #'close '(:after) `((eql ,xio))))))
    xio))



LSE SYSTEM
==========

::

    nasium-lse                              # cli
    nasium-lse-server [configuration-file]  # server

commands: ::

    (connections max-number N)
    (connections enable)
    (connections disable)

    (filter insert allow IP [BITS])
    (filter insert deny  IP [BITS])
    (filter append allow IP [BITS])
    (filter append deny  IP [BITS])
    (filter delete allow IP [BITS])
    (filter delete deny  IP [BITS])

    (filter insert allow all)
    (filter insert deny  all)
    (filter append allow all)
    (filter append deny  all)
    (filter delete allow all)
    (filter delete deny  all)

    (filter flush)

    (filter list)
    (filter list all)
    (filter list deny)
    (filter list allow)

    (console kill all)
    (console kill xterm)
    (console kill socket)
    (console kill N)
    (console list)
    (console list all)
    (console list xterm)
    (console list socket)

    (console create xterm)
    (console create xterm display D)

    (configuration save)
    (configuration load)




Gestion des consoles en Common Lisp
===================================

    Comme clisp ne fourni pas de threads, on a deux solutions pour
    implémenter les consoles:

        - forked un processus par console, et implémenter un IPC entre
          un processus maîtres et les processus consoles avec
          transmission de l'état (commande PR), et des commandes (le
          maître pouvant terminer une session des consoles
          utilisateurs).

        - implementer une machine virtuelle multi-threads dans un seul
          processus clisp.

    Dans les deux cas la gestion des E/S est critique (utilisation de
    SOCKET:SOCKET-STATUS, avec gestion des flots d'E/S dans tous les
    sens).

    Reportons le choix entre les deux après analyse de l'interpréteur
    LSE.



Gestion des consoles en C (OBSOLETE)
====================================

    On veut  gérer toutes  les consoles dans  un seul  processus unix,
    chaque utilisateur  ayant son  propre thread.  (Afin  de "simuler"
    (de  façon  lointaine)  le   fonctionnement  du  système  LSE  sur
    Mitra-15,  et aussi  d'étudier l'implémentation  d'un  tel système
    multi-utilisateur).

    Ceci nous permet également  d'implémenter la commande PRENDRE ETAT
    CONSOLE directement,  sans passer par un fichier  "SWAP" comme sur
    Mitra-15, et sans avoir à utiliser un autre IPC.

    En conséquence,  on ne  peut pas utiliser  les signaux  pour gérer
    certains états du terminal  (ESC <-> SIGQUIT, CTRL-A <-> SIGINTR),
    car on ne saurait pas de quelle console le signal proviendrait.

    Le système comportera donc deux threads par console :

       - un thread d'exécution du système LSE (commandes et interprétation),

       - un  thread d'E/S  console  qui recevra  les caractères  tapés
         (stty min  1), et  qui génèrera un  "signal" spécifique  à la
         console pour ESC et pour CTRL-A.

       - une synchronisation spéciale aura lieu entre ces deux threads
         lors de la lecture d'une entrée de la console.


    Une console peut être connectée soit directement sur un xterm (via
    pty) pour la  console principale, soit via un  socket sur un xterm
    ou un autre émulateur de terminal configuré spécialement pour LSE.

    # We need a font with an up arrow instead of the caret (^),
    # and with a left arrow instead of the underline (_).
    # This dec font has these arrow characters, but mapped on 0xfc and 0xfb.
    font='-dec-terminal-bold-r-normal-*-14-*-*-*-*-*-dec-dectech'


    # We reset the terminal to function as a LSE console.
    # The intr signal is sent upon CTRL-A  key (used by ATT() function).
    # The quit signal is sent upon ESC key key.
    # Start, stop and susp signals are not mapped.
    stty raw  \
        olcuc -ocrnl -onlcr \
        -echo -echoe -echok -echonl -echoprt -echoke -echoctl \
        intr   0x00 \
        start  0x00 \
        stop   0x00 \
        susp   0x00 \
        quit   0x00 \
        erase  0x00 \
        kill   0x00 \
        eof    0x00 \
        eol    0x00 \
        eol2   0x00 \
        rprnt  0x00 \
        werase 0x00 \
        lnext  0x00


Interpretation (Obsolete)
=========================

Conclusion :


    Implémenter une machine virtuelle et générer un bytecode est plus
    simple que cette génération au vol du CPF avec la manipulation des
    piles.


SI EXPRESSION ! A_SI B>0 ALORS 1 SINON 2

Objectifs :

    - Interpréter "directement" l'arbre syntaxique,
      sans générer de code postfixé.

    - Ne pas utiliser la  pile d'exécution du langage d'implémentation
      (éviter des problèmes entre le  contrôle de flôt L.S.E. et celui
      de l'interpréteur  (PROCEDURE ou fonctions L.S.E.,  ALLER EN, ou
      RETOUR EN ; appels  récursifs des fonctions d'interprétation des
      instructions et d'évaluation des expressions).

Solution :

    - Si on  veut éviter une implémentation récursive,  le parcours de
      l'arbre   syntaxique  (qui  se   fait  forcément   d'une  manière
      préfixée),  et son  exécution nécessite  l'utilisation  de piles
      pour obtenir  un effet postfixé. D'une certaine  manière, le CPF
      est généré au vol dans  la pile d'instructions.  Ceci est mis en
      évidence par  la présence de deux  parties pour l'interprétation
      de quasiment chaque instruction, une empilant les expressions et
      sous-instructions  (générant  la CPF),  et  l'autre dépilant  et
      calculant les résultats (exécutant).

::

       pile_expression
       pile_instruction

    interpréteur(ligne_debut,ligne_arret)

       ligne_suivante
       instruction_suivante

       ligne_courante=ligne_debut
       si ligne_courante n'existe pas alors
          erreur
       fsi
       instruction_courante=premiere instruction de la ligne_courante
       arret=(ligne_courante==ligne_arret)

       tant que ! arret faire

          executer ligne_courante,instruction_courante resultat : ligne_suivante

          cas ligne_suivante :

          quand arreter alors
             arret=vrai

          quand suivant alors
             si sommet_pile_instruction est marqueur alors
                ligne_suivante =  chercher la ligne suivante dans le programme
                si pas de ligne suivante alors
                   erreur
                fsi
                instruction_suivante=premiere instruction de la ligne_suivante
                arret=pasapas
             sinon
                depiler_instruction instruction_suivante
                ligne_suivante=ligne_courante
             fsi

          quand numero de ligne alors
             si pas de ligne suivante alors
                erreur
             fsi
             instruction_suivante=premiere instruction de la ligne_suivante
             arret=pasapas
          fcas

          ligne_courante=ligne_suivante
          instruction_courante=instruction_suivante
          arret=arret ou (ligne_courante==ligne_arret)
       fait



La  pile d'expression  peut ne  pas être  vide entre  sauts  de lignes
(appels de procedure fonction).

La pile d'instruction  peut être ligne par ligne,  auquel cas, il faut
une pile de piles d'instructions pour gérer les appels de procédure et
de fonction, ou il faut  empiler des marqueurs afin de pouvoir dépiler
jusqu'au  marqueur en  cas de  déroutement (ALLER  EN), et  en  cas de
retour  (RETOUR/RETOUR  EN/RESULTAT).  Un  RETOUR EN  dépilerait  deux
marqueurs.  Un  RETOUR  EN  doit  aussi dépiler  l'expression  et  les
instructions!  en cours d'évaluation qui avaient appelé la fonction.

::

    10 A_0-1
    20 SI 2+&F(A)=0 ALORS AFFICHER 'OUI' SINON AFFICHER 'NON'
    25 AFFICHER 'FINI';TERMINER
    30 AFFICHER 'ANNULE';TERMINER
    50 PROCEDURE &F(X) LOCAL X
    55 SI 1+X=0 ALORS RETOUR EN 30;RESULTAT -2

Voici le travail, arrivé en 55: ::

      ligne_courante       = 55
      instruction_courante = evaluer_ident(X)

      pile_i:
        55,+2
        55,nombre(0)
        55,=2
        55,si2(retouren(nombre(30)),nil)
        55,resultat(-2)
        50,marqueur
        20,+2
        20,nombre(0)
        20,=2
        20,si2(afficher('OUI'),afficher('NON'))
        0,marqueur
       -------------------------------------------
      pile_e:
        1
        50,marqueur
        2
        0,marqueur
       -------------------------------------------

On ne peut exécuter qu'une seule  ligne à la fois par procédure alors,
on n'a besoin que d'un type de marqueur, empilé en entrée de programme
ou de procédure/fonction.



TERMINER vide entièrement les piles.

PAUSE en vide pas entièrement les piles.
      (PAUSE dans  une fonction en  train dévaluer une  (ou plusieurs)
      expression(s imbriqués).
      PAUSE vide les piles jusqu'au marqueur de procedure.


CONTINUER           continue si de rien n'était.

POURSUIVRE JUSQU'EN continue comme si  de rien n'était en changeant le
                    point d'arrêt.

REPRENDRE EN N1,N2  fait comme si des RETOUR EN * / ALLER EN après la PAUSE,
                    et en changeant le point d'arrêt.

::

   boucle:
       si (l,i) == (nil,nil) alors
          si pile_i est vide alors
             ligne suivante
          sinon
             depiler_i (l,i)
          fsi
       sinon
          (l,i)=executer (l,i);
       fsi
    fboucle


             alleren
             faire -
             si - alors - sinon -
             fonction -
             procedure -
             - ; -



     valeur2
     valeur1
    ---------

     ligne2, instruction2
     ligne1, instruction1
    ----------------------

     -> ligneN, instructionN



    ligneN, si c_expr i_alors i_sinon :
         empiler_i ligneN, si i_alors i_sinon
         --> ligneN, c_expr

    ligneN, si i_alors i_sinon
         depiler_e c
         si c alors
             --> ligneN i_alors
         sinon
             --> ligneN i_sinon

    ligneN, = a b
         empiler_i ligneN, =
         empiler_i ligneN, b
         --> ligneN, a

    ligneN, =
         depiler_e b
         depiler_e a
         empiler_e a==b
         --> nil

    ligneN, nombre x
         empiler_e x
         --> nil

    ligneN, i_a ; i_b
         empiler_i i_b
         --> ligne_N, i_a


    ligne_N, alleren expr
         empiler_i alleren
         --> ligne_N, expr

    ligne_N, alleren
         depiler_e ligne_ou
         vider_pile_i (LIGNE)
         --> ligne_ou, nil

    boucle:
       si (l,i) == (nil,nil) alors
          si pile_i est vide alors
             ligne suivante
          sinon
             depiler_i (l,i)
          fsi
       sinon
          (l,i)=executer (l,i);
       fsi
    fboucle


::

    10 A_CNB("12 13 14",3,N)

    ----------------------------------------
    pile_v:
        ex_variable(type_ident A)

    pile_i:
        ex_affectation
        (op_fonction
                (type_ident CNB)
                (op_liste_v
                   (type_chaine "10 11 12")
                   (op_liste_v
                      (type_nombre 3)
                      (type_ident N)
                   )
                )
             )
    ----------------------------------------
    pile_v:
        ex_variable(type_ident A)
        ex_variable(type_ident N)

    pile_i:
        ex_affectation
        (type_ident CNB)
        (ex_fonction)
        (type_chaine "10 11 12")
        (type_nombre 3)

    ----------------------------------------
    pile_v:
        ex_variable(type_ident A)
        ex_variable(type_ident N)
        (type_nombre 3)
        (type_chaine "10 11 12")

    pile_i:
        ex_affectation
        (type_ident CNB)
        (ex_fonction)


    (setq programme '(
       (  10
          (op_affectation
             (type_ident A)
             (op_fonction
                (type_ident CNB)
                (op_liste_v
                   (type_chaine "10 11 12")
                   (op_liste_v
                      (type_nombre 3)
                      (type_ident N)
                   )
                )
             )
          )
       )
       (  20
          (op_afficher
             nil
             (op_liste_v
                (type_ident A)
                (type_ident N)
             )
          )
       )
       (  30
          (op_terminer)
       )
    ))




.. comment: ;;;; THE END ;;;;


