.. comment: -*- mode:rst; coding:utf-8 -*-

NASIUM-LSE: An Implementation of the L.S.E. programming language written in Common Lisp
#######################################################################################


Compiling
=========


Development
-----------

A ``loader.lisp`` file is provided to easily load (and reload) the
sources. ::

    (cd #P "~/src/nasium-lse/src/")
    (load "loader.lisp")

It should be edited, notably there are absolute pathnames to remove
~/.cache/common-lisp subdirectories.

Once loaded, the lse system can be run and debugged with: ::

    (com.informatimago.lse.unix-cli:main)



Deployment
----------

A Makefile and various generate scripts are provided to compile
deployment targets.

The available targets are:

  - ``BUILD_HOSTS='host1 host2 … hostn' make all``:

        Compiles the following targets on each of the hosts (thru
        ssh).  The current directory should be shared or a copy
        available at the same path.  The various hosts should be
        different target plateforms.  (We don't do cross-compiling).


  - ``make unix-cli`` to compile the unix command line.  This is done
    thru a lisp script, ``generate-unix-clip.lisp``, which generates
    an executable named:

        lse-{lisp-implementation}-{system}-{distrib}-{release}-{machine-type}

    and a corresponding manifest (text) file.

    It also makes a symlink named ``lse``, so that you can easily run
    the last compiled executable.

  - ``make unix-server`` to compile the unix server.  [NOT YET]


Once compiled, the executables can be run with: ::

    $ ./lse --aide
    $ ./lse --montrer-touches --configuration-interactive


Features
========

Some variants between the T1600 and the Mitra-15 can be selected by
pushing one or the other of those features: ::

    (pushnew :LSE-T1600     *features*)  ; \
    (pushnew :LSE-MITRA-15  *features*)  ;  > mutually exclusive.
    (pushnew :LSE-UNIX      *features*)  ; /

They change some messages and some limits (string lengths, block size,
line numbers, etc).

::

    (pushnew :LSE-CASE-INSENSITIVE *features*)

Makes the scanner accept lower case letters.  For tokens, they're
converted to upper case.  For strings, they're kept as given (unicode
characters are accepted in strings and are encoded in UTF-8).


The scripts (``generate-unix-clip.lisp`` and ``loader.lisp``) must be
edited to configure the features.


Debugging
=========

There are a few ``*debug-…*`` flags:

   - ``com.informatimago.lse::*debug-vm*``
   - ``com.informatimago.lse::*debug-repl*``
   - ``com.informatimago.lse.unix-cli::*debug-swank*``

When set, errors at various points  break into the debugger instead of
being handled.  Deployment targets are normally compiled with those
variables reset.

In the deployment targets, there's a ``*debugger-hook*`` that resets
the terminal (calls terminal-finalize), so that one can do some
debugging if a break occurs in the executables.  But nothing is
prepared to resume working in this occurence (since handling the error
would mean a non-local exit ``*debugger-hook*`` cannot do anything to
resume the terminal after that.  (Actually, we would have to prepare
handlers to be able to do non-locale exits from the debugger hook
resuming work reinitializing the terminal)).

Anyways, debugging is better done in the development environment
emacs+slime.  Notice that one can launch a ccl from a terminal, load
and start a swank server, and continue debugging from emacs+slime: ::

    $ ccl 
    $ (ql:quickload :swank)
    $ (swank:create-server :port 4011)

    (in emacs): M-x slime-connect RET localhost RET 4011 RET
    and see above how to load "loader.lisp".


    
Files
=====


Utilities:
----------

    environment.lisp        Binds CL dynamic variables.
    signal.lisp             Signal Handling (needs implementations #-ecl).
    logger.lisp             Logger.

IOLib utilities:
----------------

    iolib-utils.lisp        General IOLib utilities
    iolib-end-point.lisp    End-Point (addresses)
    iolib-message.lisp      Message
    iolib-server.lisp       IOLib based Server.
    iolib-client.lisp       IOLib based Client (not used).

Zebu and grammar:
-----------------

Not used anymore, I converted to rdp grammar:

    patch-zebu.lisp         Patch to com.hp.zebu.
    parser-lse.zb           LSE parser. 
    grammar.lisp            Compile the LSE grammar.
    lse-domain.lisp         Generated by Zebu.



LSE Language:
-------------

    lse-scanner.lisp        LSE scanner.
    lse-parser.lisp         LSE parser.
    compiler.lisp           LSE line byte-compiler
    vm.lisp                 ENCOURS.
    functions.lisp          LSE functions.
                            -- File functions are in the catalog.lisp


LSE system:
-----------

    packages.lisp           Definition of packages.

    configuration.lisp      EMULSE configuration. 

    task.lisp               The environment for a LSE user.


    commands.lisp           ENCOURS.

    error.lisp
    catalog.lisp            ENCOURS.
    file.lisp               LSE Data Files (record based).
    io.lisp                 ENCOURS.



Note: we'll need different ASD files for the different types of
      executables we can build.

    unix-cli.lisp           The main for a unix CLI LSE system.


    server-commands.lisp    The EMULSE Configuration commands.
                            TODO: Move and merge configuration structure to configuration.lisp

    server.lisp             The EMULSE server.  Uses iolib-server et al.

    simple-server.lisp      ENCOURS, not used.


Development files:
------------------

    scratch.lisp            Scratch file.
    loader.lisp             Used during development to quickload the systems.
    generate-unix-clip.lisp Deployment target generation script.
    Makefile                Deployment makefile.


.. comment: __Pascal Bourguignon__
.. comment: Wed Mar 14 00:10:40 CET 2012


