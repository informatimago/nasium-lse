;;; This file was generated by Zebu (Version 3.5.5)

(IN-PACKAGE "COM.INFORMATIMAGO.LSE")
(REQUIRE "zebu-package")
(USE-PACKAGE "ZEBU")


(DEFUN EXECUTER/1491 (TOK-EXECUTER EXPRESSION)
  (DECLARE (IGNORE TOK-EXECUTER))
  (LIST :EXECUTER EXPRESSION))

(DEFUN EXECUTER491 (EXECUTER/1 TOK-VIRGULE EXPRESSION)
  (DECLARE (IGNORE TOK-VIRGULE))
  (SNOC EXECUTER/1 EXPRESSION))

(DEFUN SUPPRIMER/1491 (TOK-SUPPRIMER EXPRESSION)
  (DECLARE (IGNORE TOK-SUPPRIMER))
  (LIST :SUPPRIMER EXPRESSION))

(DEFUN SUPPRIMER491 (SUPPRIMER/1 TOK-VIRGULE EXPRESSION)
  (DECLARE (IGNORE TOK-VIRGULE))
  (SNOC SUPPRIMER/1 EXPRESSION))

(DEFUN CHARGER/1491 (TOK-CHARGER IDENTIFICATEUR TOK-VIRGULE
                     EXPRESSION.1 TOK-VIRGULE EXPRESSION.2)
  (DECLARE (IGNORE TOK-CHARGER TOK-VIRGULE TOK-VIRGULE))
  (LIST :CHARGER IDENTIFICATEUR EXPRESSION.1 EXPRESSION.2))

(DEFUN CHARGER491 (CHARGER/1 TOK-VIRGULE IDENTIFICATEUR)
  (DECLARE (IGNORE TOK-VIRGULE))
  (SNOC CHARGER/1 IDENTIFICATEUR))

(DEFUN GARER491 (TOK-GARER IDENTIFICATEUR TOK-VIRGULE EXPRESSION.1
                 TOK-VIRGULE EXPRESSION.2)
  (DECLARE (IGNORE TOK-GARER TOK-VIRGULE TOK-VIRGULE))
  (LIST :GARER IDENTIFICATEUR EXPRESSION.1 EXPRESSION.2))

(DEFUN APPEL/1491 (IDENTIFICATEUR TOK-PARGAUCHE)
  (DECLARE (IGNORE TOK-PARGAUCHE))
  (LIST :APPEL IDENTIFICATEUR))

(DEFUN APPEL491 (APPEL/1 LISTE-EXPRESSION TOK-PARDROITE)
  (DECLARE (IGNORE TOK-PARDROITE))
  (NCONC APPEL/1 LISTE-EXPRESSION))

(DEFUN APPEL492 (APPEL/1 TOK-PARDROITE)
  (DECLARE (IGNORE TOK-PARDROITE))
  (PROGN APPEL/1))

(DEFUN RESULTAT492 (TOK-RESULTAT EXPRESSION)
  (DECLARE (IGNORE TOK-RESULTAT))
  (LIST :RESULTAT EXPRESSION))

(DEFUN RETOUR492 (TOK-RETOUR)
  (DECLARE (IGNORE TOK-RETOUR))
  (LIST :RETOUR))

(DEFUN RETOUR493 (TOK-RETOUR TOK-EN EXPRESSION)
  (DECLARE (IGNORE TOK-RETOUR TOK-EN))
  (LIST :RETOUR-EN EXPRESSION))

(DEFUN FAIRE-POUR493 (TOK-FAIRE TOK-NUMERO TOK-POUR IDENTIFICATEUR
                      TOK-FLECHE EXPRESSION)
  (DECLARE (IGNORE TOK-FAIRE TOK-POUR TOK-FLECHE))
  (LIST TOK-NUMERO IDENTIFICATEUR EXPRESSION))

(DEFUN FAIRE-POUR-PAS493 (FAIRE-POUR TOK-PAS EXPRESSION)
  (DECLARE (IGNORE TOK-PAS))
  (SNOC FAIRE-POUR EXPRESSION))

(DEFUN FAIRE-POUR-PAS494 (FAIRE-POUR) (SNOC FAIRE-POUR NIL))

(DEFUN FAIRE-TANT-QUE494 (FAIRE-POUR-PAS TOK-TANT TOK-QUE
                          DISJONCTION)
  (DECLARE (IGNORE TOK-TANT TOK-QUE))
  (CONS :FAIRE-TANT-QUE (SNOC FAIRE-POUR-PAS DISJONCTION)))

(DEFUN FAIRE-JUSQU-A494 (FAIRE-POUR-PAS TOK-JUSQUA EXPRESSION)
  (DECLARE (IGNORE TOK-JUSQUA))
  (CONS :FAIRE-JUSQU-A (SNOC FAIRE-POUR-PAS EXPRESSION)))

(DEFUN DEBUT-FIN494 (TOK-DEBUT LISTE-INST-OU-DECL TOK-FIN)
  (DECLARE (IGNORE TOK-DEBUT TOK-FIN))
  (CONS :DEBUT LISTE-INST-OU-DECL))

(DEFUN PAUSE494 (TOK-PAUSE)
  (DECLARE (IGNORE TOK-PAUSE))
  (LIST :PAUSE))

(DEFUN TERMINER494 (TOK-TERMINER)
  (DECLARE (IGNORE TOK-TERMINER))
  (LIST :TERMINER))

(DEFUN SI-ALORS494 (TOK-SI DISJONCTION TOK-ALORS INSTRUCTION)
  (DECLARE (IGNORE TOK-SI TOK-ALORS))
  (LIST :SI DISJONCTION INSTRUCTION))

(DEFUN SI-ALORS-SINON494 (SI-ALORS TOK-SINON INSTRUCTION)
  (DECLARE (IGNORE TOK-SINON))
  (SNOC SI-ALORS INSTRUCTION))

(DEFUN ALLER-EN494 (TOK-ALLER TOK-EN EXPRESSION)
  (DECLARE (IGNORE TOK-ALLER TOK-EN))
  (LIST :ALLER-EN EXPRESSION))

(DEFUN SPEC-REP494 (TOK-FOIS)
  (DECLARE (IGNORE TOK-FOIS))
  (LIST :REP-VAR))

(DEFUN SPEC-REP-NUM494 (TOK-NUMERO) (LIST :REP TOK-NUMERO))

(DEFUN SPECIFICATION494 (TOK-LITCHAINE)
  (LIST :SPEC-CHAINE '(:REP-1) TOK-LITCHAINE))

(DEFUN SPECIFICATION495 (TOK-DIVISE)
  (DECLARE (IGNORE TOK-DIVISE))
  (LIST :SPEC-SLASH '(:REP-1)))

(DEFUN SPECIFICATION496 (TOK-X)
  (DECLARE (IGNORE TOK-X))
  (LIST :SPEC-SPACE '(:REP-1)))

(DEFUN SPECIFICATION497 (TOK-C)
  (DECLARE (IGNORE TOK-C))
  (LIST :SPEC-CR '(:REP-1)))

(DEFUN SPECIFICATION498 (TOK-L)
  (DECLARE (IGNORE TOK-L))
  (LIST :SPEC-NL '(:REP-1)))

(DEFUN SPECIFICATION499 (TOK-U)
  (DECLARE (IGNORE TOK-U))
  (LIST :SPEC-U '(:REP-1)))

(DEFUN SPECIFICATION500 (TOK-F TOK-NUMERO.1 TOK-POINT TOK-NUMERO.2)
  (DECLARE (IGNORE TOK-F TOK-POINT))
  (LIST :SPEC-F '(:REP-1) TOK-NUMERO.1 TOK-NUMERO.2))

(DEFUN SPECIFICATION501 (TOK-E TOK-NUMERO.1 TOK-POINT TOK-NUMERO.2)
  (DECLARE (IGNORE TOK-E TOK-POINT))
  (LIST :SPEC-E '(:REP-1) TOK-NUMERO.1 TOK-NUMERO.2))

(DEFUN SPECIFICATION502 (SPEC-REP TOK-LITCHAINE)
  (LIST :SPEC-CHAINE SPEC-REP TOK-LITCHAINE))

(DEFUN SPECIFICATION503 (SPEC-REP TOK-DIVISE)
  (DECLARE (IGNORE TOK-DIVISE))
  (LIST :SPEC-SLASH SPEC-REP))

(DEFUN SPECIFICATION504 (SPEC-REP TOK-X)
  (DECLARE (IGNORE TOK-X))
  (LIST :SPEC-SPACE SPEC-REP))

(DEFUN SPECIFICATION505 (SPEC-REP TOK-C)
  (DECLARE (IGNORE TOK-C))
  (LIST :SPEC-CR SPEC-REP))

(DEFUN SPECIFICATION506 (SPEC-REP TOK-L)
  (DECLARE (IGNORE TOK-L))
  (LIST :SPEC-NL SPEC-REP))

(DEFUN SPECIFICATION507 (SPEC-REP-NUM TOK-U)
  (DECLARE (IGNORE TOK-U))
  (LIST :SPEC-U SPEC-REP-NUM))

(DEFUN SPECIFICATION508 (SPEC-REP-NUM TOK-F TOK-NUMERO.1 TOK-POINT
                         TOK-NUMERO.2)
  (DECLARE (IGNORE TOK-F TOK-POINT))
  (LIST :SPEC-F SPEC-REP-NUM TOK-NUMERO.1 TOK-NUMERO.2))

(DEFUN SPECIFICATION509 (SPEC-REP-NUM TOK-E TOK-NUMERO.1 TOK-POINT
                         TOK-NUMERO.2)
  (DECLARE (IGNORE TOK-E TOK-POINT))
  (LIST :SPEC-E SPEC-REP-NUM TOK-NUMERO.1 TOK-NUMERO.2))

(DEFUN LISTE-SPEC509 (LISTE-SPEC TOK-VIRGULE SPECIFICATION)
  (DECLARE (IGNORE TOK-VIRGULE))
  (SNOC LISTE-SPEC SPECIFICATION))

(DEFUN LISTE-SPEC510 (SPECIFICATION) (LIST SPECIFICATION))

(DEFUN FORMAT510 (TOK-CROGAUCHE LISTE-SPEC TOK-CRODROITE)
  (DECLARE (IGNORE TOK-CROGAUCHE TOK-CRODROITE))
  (PROGN LISTE-SPEC))

(DEFUN AFFICHER/FORMAT510 (TOK-AFFICHER FORMAT)
  (DECLARE (IGNORE TOK-AFFICHER))
  (LIST :AFFICHER FORMAT))

(DEFUN AFFICHER510 (TOK-AFFICHER LISTE-EXPRESSION)
  (DECLARE (IGNORE TOK-AFFICHER))
  (LIST* :AFFICHER NIL LISTE-EXPRESSION))

(DEFUN AFFICHER511 (AFFICHER/FORMAT LISTE-EXPRESSION)
  (NCONC AFFICHER/FORMAT LISTE-EXPRESSION))

(DEFUN LIRE511 (TOK-LIRE LISTE-REFERENCE)
  (DECLARE (IGNORE TOK-LIRE))
  (CONS :LIRE LISTE-REFERENCE))

(DEFUN AFFECTATION511 (REFERENCE TOK-FLECHE EXPRESSION)
  (DECLARE (IGNORE TOK-FLECHE))
  (LIST :AFFECTATION REFERENCE EXPRESSION))

(DEFUN LISTE-REFERENCE511 (LISTE-REFERENCE TOK-VIRGULE REFERENCE)
  (DECLARE (IGNORE TOK-VIRGULE))
  (SNOC LISTE-REFERENCE REFERENCE))

(DEFUN LISTE-REFERENCE512 (REFERENCE) (LIST REFERENCE))

(DEFUN REFERENCE/VECTEUR512 (IDENTIFICATEUR TOK-CROGAUCHE EXPRESSION)
  (DECLARE (IGNORE TOK-CROGAUCHE))
  (LIST :AREF IDENTIFICATEUR EXPRESSION))

(DEFUN REFERENCE512 (REFERENCE/VECTEUR TOK-VIRGULE EXPRESSION
                     TOK-CRODROITE)
  (DECLARE (IGNORE TOK-VIRGULE TOK-CRODROITE))
  (SNOC REFERENCE/VECTEUR EXPRESSION))

(DEFUN REFERENCE513 (REFERENCE/VECTEUR TOK-CRODROITE)
  (DECLARE (IGNORE TOK-CRODROITE))
  (PROGN REFERENCE/VECTEUR))

(DEFUN REFERENCE514 (IDENTIFICATEUR) (LIST :VREF IDENTIFICATEUR))

(DEFUN DECL-LOCAL514 (TOK-LOCAL LISTE-IDENTIFICATEUR)
  (DECLARE (IGNORE TOK-LOCAL))
  (PROGN LISTE-IDENTIFICATEUR))

(DEFUN DECL-PROCEDURE/TETE514 (TOK-PROCEDURE
                               IDENTIFICATEUR
                               TOK-PARGAUCHE)
  (DECLARE (IGNORE TOK-PROCEDURE TOK-PARGAUCHE))
  (LIST :PROCEDURE IDENTIFICATEUR))

(DEFUN DECL-PROCEDURE/N514 (DECL-PROCEDURE/TETE LISTE-IDENTIFICATEUR
                            TOK-PARDROITE)
  (DECLARE (IGNORE TOK-PARDROITE))
  (SNOC DECL-PROCEDURE/TETE LISTE-IDENTIFICATEUR))

(DEFUN DECL-PROCEDURE/0514 (DECL-PROCEDURE/TETE TOK-PARDROITE)
  (DECLARE (IGNORE TOK-PARDROITE))
  (SNOC DECL-PROCEDURE/TETE NIL))

(DEFUN DECL-PROCEDURE514 (DECL-PROCEDURE/0)
  (SNOC DECL-PROCEDURE/0 NIL))

(DEFUN DECL-PROCEDURE515 (DECL-PROCEDURE/0 DECL-LOCAL)
  (SNOC DECL-PROCEDURE/0 DECL-LOCAL))

(DEFUN DECL-PROCEDURE516 (DECL-PROCEDURE/N)
  (SNOC DECL-PROCEDURE/N NIL))

(DEFUN DECL-PROCEDURE517 (DECL-PROCEDURE/N DECL-LOCAL)
  (SNOC DECL-PROCEDURE/N DECL-LOCAL))

(DEFUN DECL-TABL/1517 (IDENTIFICATEUR TOK-CROGAUCHE EXPRESSION)
  (DECLARE (IGNORE TOK-CROGAUCHE))
  (LIST :ADECL IDENTIFICATEUR EXPRESSION))

(DEFUN DECL-TABL517 (DECL-TABL/1 TOK-VIRGULE EXPRESSION
                     TOK-CRODROITE)
  (DECLARE (IGNORE TOK-VIRGULE TOK-CRODROITE))
  (SNOC DECL-TABL/1 EXPRESSION))

(DEFUN DECL-TABL518 (DECL-TABL/1 TOK-CRODROITE)
  (DECLARE (IGNORE TOK-CRODROITE))
  (PROGN DECL-TABL/1))

(DEFUN LISTE-DECL-TABL518 (LISTE-DECL-TABL TOK-VIRGULE DECL-TABL)
  (DECLARE (IGNORE TOK-VIRGULE))
  (SNOC LISTE-DECL-TABL DECL-TABL))

(DEFUN LISTE-DECL-TABL519 (DECL-TABL) (LIST DECL-TABL))

(DEFUN DECL-TABLEAU519 (TOK-TABLEAU LISTE-DECL-TABL)
  (DECLARE (IGNORE TOK-TABLEAU))
  (CONS :TABLEAU LISTE-DECL-TABL))

(DEFUN DECL-CHAINE519 (TOK-CHAINE LISTE-IDENTIFICATEUR)
  (DECLARE (IGNORE TOK-CHAINE))
  (CONS :CHAINE LISTE-IDENTIFICATEUR))

(DEFUN LIBERATION519 (TOK-LIBERER LISTE-IDENTIFICATEUR)
  (DECLARE (IGNORE TOK-LIBERER))
  (CONS :LIBERER LISTE-IDENTIFICATEUR))

(DEFUN LISTE-INSTRUCTION519 (LISTE-INSTRUCTION TOK-PTVIRG
                             INSTRUCTION)
  (DECLARE (IGNORE TOK-PTVIRG))
  (SNOC LISTE-INSTRUCTION INSTRUCTION))

(DEFUN LISTE-INSTRUCTION520 (INSTRUCTION TOK-PTVIRG TOK-COMMENTAIRE)
  (DECLARE (IGNORE TOK-PTVIRG))
  (LIST INSTRUCTION (LIST :COMMENTAIRE TOK-COMMENTAIRE)))

(DEFUN LISTE-INSTRUCTION521 (INSTRUCTION) (LIST INSTRUCTION))

(DEFUN LISTE-INST-OU-DECL521 (LISTE-INST-OU-DECL
                              TOK-PTVIRG
                              INSTRUCTION)
  (DECLARE (IGNORE TOK-PTVIRG))
  (SNOC LISTE-INST-OU-DECL INSTRUCTION))

(DEFUN LISTE-INST-OU-DECL522 (LISTE-INST-OU-DECL TOK-PTVIRG DECL)
  (DECLARE (IGNORE TOK-PTVIRG))
  (SNOC LISTE-INST-OU-DECL DECL))

(DEFUN LISTE-INST-OU-DECL523 (INSTRUCTION) (LIST INSTRUCTION))

(DEFUN LISTE-INST-OU-DECL524 (DECL) (LIST DECL))

(DEFUN LISTE-INST-OU-DECL525 (TOK-COMMENTAIRE)
  (LIST :COMMENTAIRE TOK-COMMENTAIRE))

(DEFUN LIGNE-DECL-PROCEDURE/0525 (TOK-NUMERO DECL-PROCEDURE)
  (LIST :LIGNE-PROGRAMME
        TOK-NUMERO
        (LIST :DECL-PROCEDURE DECL-PROCEDURE)))

(DEFUN LIGNE-PROGRAMME525 (TOK-NUMERO LISTE-INST-OU-DECL)
  (LIST* :LIGNE-PROGRAMME TOK-NUMERO LISTE-INST-OU-DECL))

(DEFUN LIGNE-PROGRAMME526 (TOK-NUMERO TOK-COMMENTAIRE)
  (LIST :LIGNE-PROGRAMME
        TOK-NUMERO
        (LIST :COMMENTAIRE TOK-COMMENTAIRE)))

(DEFUN LIGNE-PROGRAMME527 (LIGNE-DECL-PROCEDURE/0 TOK-PTVIRG
                           LISTE-INST-OU-DECL)
  (DECLARE (IGNORE TOK-PTVIRG))
  (NCONC LIGNE-DECL-PROCEDURE/0 LISTE-INST-OU-DECL))

(DEFUN CONDITION527 (TOK-NON CONDITION)
  (DECLARE (IGNORE TOK-NON))
  (LIST :NON CONDITION))

(DEFUN CONDITION528 (TOK-PARGAUCHE DISJONCTION TOK-PARDROITE)
  (DECLARE (IGNORE TOK-PARGAUCHE TOK-PARDROITE))
  (PROGN DISJONCTION))

(DEFUN CONDITION529 (EXPRESSION.1 TOK-LT EXPRESSION.2)
  (DECLARE (IGNORE TOK-LT))
  (LIST :LT EXPRESSION.1 EXPRESSION.2))

(DEFUN CONDITION530 (EXPRESSION.1 TOK-LE EXPRESSION.2)
  (DECLARE (IGNORE TOK-LE))
  (LIST :LE EXPRESSION.1 EXPRESSION.2))

(DEFUN CONDITION531 (EXPRESSION.1 TOK-NE EXPRESSION.2)
  (DECLARE (IGNORE TOK-NE))
  (LIST :NE EXPRESSION.1 EXPRESSION.2))

(DEFUN CONDITION532 (EXPRESSION.1 TOK-EQ EXPRESSION.2)
  (DECLARE (IGNORE TOK-EQ))
  (LIST :EG EXPRESSION.1 EXPRESSION.2))

(DEFUN CONDITION533 (EXPRESSION.1 TOK-GT EXPRESSION.2)
  (DECLARE (IGNORE TOK-GT))
  (LIST :GT EXPRESSION.1 EXPRESSION.2))

(DEFUN CONDITION534 (EXPRESSION.1 TOK-GE EXPRESSION.2)
  (DECLARE (IGNORE TOK-GE))
  (LIST :GE EXPRESSION.1 EXPRESSION.2))

(DEFUN CONJONCTION534 (CONJONCTION TOK-ET CONDITION)
  (DECLARE (IGNORE TOK-ET))
  (LIST :ET CONJONCTION CONDITION))

(DEFUN CONJONCTION535 (CONDITION) (PROGN CONDITION))

(DEFUN DISJONCTION535 (DISJONCTION TOK-OU CONJONCTION)
  (DECLARE (IGNORE TOK-OU))
  (LIST :OU DISJONCTION CONJONCTION))

(DEFUN DISJONCTION536 (CONJONCTION) (PROGN CONJONCTION))

(DEFUN LISTE-IDENTIFICATEUR536 (LISTE-IDENTIFICATEUR
                                TOK-VIRGULE
                                IDENTIFICATEUR)
  (DECLARE (IGNORE TOK-VIRGULE))
  (SNOC LISTE-IDENTIFICATEUR IDENTIFICATEUR))

(DEFUN LISTE-IDENTIFICATEUR537 (IDENTIFICATEUR) (LIST IDENTIFICATEUR))

(DEFUN LISTE-EXPRESSION537 (LISTE-EXPRESSION TOK-VIRGULE EXPRESSION)
  (DECLARE (IGNORE TOK-VIRGULE))
  (SNOC LISTE-EXPRESSION EXPRESSION))

(DEFUN LISTE-EXPRESSION538 (EXPRESSION) (LIST EXPRESSION))

(DEFUN SIMPLE538 (TOK-SI DISJONCTION TOK-ALORS EXPRESSION.1 TOK-SINON
                  EXPRESSION.2)
  (DECLARE (IGNORE TOK-SI TOK-ALORS TOK-SINON))
  (LIST :XI DISJONCTION EXPRESSION.1 EXPRESSION.2))

(DEFUN SIMPLE539 (IDENTIFICATEUR TOK-PARGAUCHE TOK-PARDROITE)
  (DECLARE (IGNORE TOK-PARGAUCHE TOK-PARDROITE))
  (LIST :FONCTION IDENTIFICATEUR))

(DEFUN SIMPLE540 (IDENTIFICATEUR TOK-PARGAUCHE LISTE-EXPRESSION
                  TOK-PARDROITE)
  (DECLARE (IGNORE TOK-PARGAUCHE TOK-PARDROITE))
  (LIST* :FONCTION IDENTIFICATEUR LISTE-EXPRESSION))

(DEFUN SIMPLE541 (TOK-LITCHAINE) (PROGN TOK-LITCHAINE))

(DEFUN SIMPLE542 (TOK-PARGAUCHE EXPRESSION TOK-PARDROITE)
  (DECLARE (IGNORE TOK-PARGAUCHE TOK-PARDROITE))
  (PROGN EXPRESSION))

(DEFUN SIMPLE543 (TOK-NOMBRE) (PROGN TOK-NOMBRE))

(DEFUN SIMPLE544 (TOK-NUMERO) (PROGN TOK-NUMERO))

(DEFUN FACTEUR544 (FACTEUR TOK-PUISSANCE SIMPLE)
  (DECLARE (IGNORE TOK-PUISSANCE))
  (LIST :PUISSANCE FACTEUR SIMPLE))

(DEFUN TERME544 (TERME TOK-FOIS FACTEUR)
  (DECLARE (IGNORE TOK-FOIS))
  (LIST :FOIS TERME FACTEUR))

(DEFUN TERME545 (TERME TOK-DIVISE FACTEUR)
  (DECLARE (IGNORE TOK-DIVISE))
  (LIST :DIVISE TERME FACTEUR))

(DEFUN EXPRESSION545 (TOK-MOINS TERME)
  (DECLARE (IGNORE TOK-MOINS))
  (LIST :NEG TERME))

(DEFUN EXPRESSION546 (EXPRESSION TOK-MOINS TERME)
  (DECLARE (IGNORE TOK-MOINS))
  (LIST :MOINS EXPRESSION TERME))

(DEFUN EXPRESSION547 (EXPRESSION TOK-PLUS TERME)
  (DECLARE (IGNORE TOK-PLUS))
  (LIST :PLUS EXPRESSION TERME))

(DEFUN EXPRESSION548 (EXPRESSION TOK-CONCAT TERME)
  (DECLARE (IGNORE TOK-CONCAT))
  (LIST :CONCAT EXPRESSION TERME))

(DEFUN IDENTIFICATEUR548 (TOK-IDENTIFICATEUR)
  (PROGN TOK-IDENTIFICATEUR))

(DEFUN AFFIC/FORMAT548 (TOK-AFFIC FORMAT)
  (DECLARE (IGNORE TOK-AFFIC))
  (LIST :AFFICHER FORMAT))

(DEFUN AFFIC548 (AFFIC/FORMAT LISTE-EXPRESSION)
  (NCONC AFFIC/FORMAT LISTE-EXPRESSION))

(DEFUN AFFIC549 (TOK-AFFIC LISTE-EXPRESSION)
  (DECLARE (IGNORE TOK-AFFIC))
  (LIST* :AFFICHER NIL LISTE-EXPRESSION))

(DEFUN START549 (LISTE-INSTRUCTION)
  (CONS :LISTE-INSTRUCTIONS LISTE-INSTRUCTION))

(DEFUN START550 (AFFIC) (LIST :LISTE-INSTRUCTIONS AFFIC))

(DEFUN START551 (TOK-ERREUR) (PROGN TOK-ERREUR))

(DEFUN START552 () (PROGN NIL))


(EVAL-WHEN (:COMPILE-TOPLEVEL)
  (UNLESS (MEMBER "zebu-regex" *MODULES* :TEST #'EQUAL)
    (WARN "Load the Zebu Compiler!")))
(DECLAIM (SPECIAL ZEBU::*REGEX-GROUPS* ZEBU::*REGEX-GROUPINGS*))
(DEFUN TOK-AFFICHER (STRING &OPTIONAL (ZEBU::START 0)
                     (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN (SETF ZEBU::*REGEX-GROUPINGS* 1)
               (BLOCK ZEBU::FINAL-RETURN
                 (BLOCK ZEBU::COMPARE
                   (LET ((ZEBU::INDEX ZEBU::START)
                         (LENGTH ZEBU::END))
                     (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                           (LIST ZEBU::INDEX NIL))
                     (LET ((ZEBU::NEW-INDEX (+ ZEBU::INDEX 8)))
                       (IF (< LENGTH ZEBU::NEW-INDEX)
                           (RETURN-FROM ZEBU::COMPARE NIL))
                       (IF (STRING= STRING
                                    "AFFICHER"
                                    :START1
                                    ZEBU::INDEX
                                    :END1
                                    ZEBU::NEW-INDEX)
                           (INCF ZEBU::INDEX 8)
                           (RETURN-FROM ZEBU::COMPARE NIL)))
                     (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                           ZEBU::INDEX)
                     (RETURN-FROM ZEBU::FINAL-RETURN T)))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))

(DEFUN TOK-ALLER (STRING &OPTIONAL (ZEBU::START 0)
                  (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN (SETF ZEBU::*REGEX-GROUPINGS* 1)
               (BLOCK ZEBU::FINAL-RETURN
                 (BLOCK ZEBU::COMPARE
                   (LET ((ZEBU::INDEX ZEBU::START)
                         (LENGTH ZEBU::END))
                     (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                           (LIST ZEBU::INDEX NIL))
                     (LET ((ZEBU::NEW-INDEX (+ ZEBU::INDEX 5)))
                       (IF (< LENGTH ZEBU::NEW-INDEX)
                           (RETURN-FROM ZEBU::COMPARE NIL))
                       (IF (STRING= STRING
                                    "ALLER"
                                    :START1
                                    ZEBU::INDEX
                                    :END1
                                    ZEBU::NEW-INDEX)
                           (INCF ZEBU::INDEX 5)
                           (RETURN-FROM ZEBU::COMPARE NIL)))
                     (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                           ZEBU::INDEX)
                     (RETURN-FROM ZEBU::FINAL-RETURN T)))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))

(DEFUN TOK-ALORS (STRING &OPTIONAL (ZEBU::START 0)
                  (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN (SETF ZEBU::*REGEX-GROUPINGS* 1)
               (BLOCK ZEBU::FINAL-RETURN
                 (BLOCK ZEBU::COMPARE
                   (LET ((ZEBU::INDEX ZEBU::START)
                         (LENGTH ZEBU::END))
                     (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                           (LIST ZEBU::INDEX NIL))
                     (LET ((ZEBU::NEW-INDEX (+ ZEBU::INDEX 5)))
                       (IF (< LENGTH ZEBU::NEW-INDEX)
                           (RETURN-FROM ZEBU::COMPARE NIL))
                       (IF (STRING= STRING
                                    "ALORS"
                                    :START1
                                    ZEBU::INDEX
                                    :END1
                                    ZEBU::NEW-INDEX)
                           (INCF ZEBU::INDEX 5)
                           (RETURN-FROM ZEBU::COMPARE NIL)))
                     (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                           ZEBU::INDEX)
                     (RETURN-FROM ZEBU::FINAL-RETURN T)))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))

(DEFUN TOK-CHAINE (STRING &OPTIONAL (ZEBU::START 0)
                   (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN (SETF ZEBU::*REGEX-GROUPINGS* 1)
               (BLOCK ZEBU::FINAL-RETURN
                 (BLOCK ZEBU::COMPARE
                   (LET ((ZEBU::INDEX ZEBU::START)
                         (LENGTH ZEBU::END))
                     (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                           (LIST ZEBU::INDEX NIL))
                     (LET ((ZEBU::NEW-INDEX (+ ZEBU::INDEX 6)))
                       (IF (< LENGTH ZEBU::NEW-INDEX)
                           (RETURN-FROM ZEBU::COMPARE NIL))
                       (IF (STRING= STRING
                                    "CHAINE"
                                    :START1
                                    ZEBU::INDEX
                                    :END1
                                    ZEBU::NEW-INDEX)
                           (INCF ZEBU::INDEX 6)
                           (RETURN-FROM ZEBU::COMPARE NIL)))
                     (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                           ZEBU::INDEX)
                     (RETURN-FROM ZEBU::FINAL-RETURN T)))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))

(DEFUN TOK-CHARGER (STRING &OPTIONAL (ZEBU::START 0)
                    (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN (SETF ZEBU::*REGEX-GROUPINGS* 1)
               (BLOCK ZEBU::FINAL-RETURN
                 (BLOCK ZEBU::COMPARE
                   (LET ((ZEBU::INDEX ZEBU::START)
                         (LENGTH ZEBU::END))
                     (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                           (LIST ZEBU::INDEX NIL))
                     (LET ((ZEBU::NEW-INDEX (+ ZEBU::INDEX 7)))
                       (IF (< LENGTH ZEBU::NEW-INDEX)
                           (RETURN-FROM ZEBU::COMPARE NIL))
                       (IF (STRING= STRING
                                    "CHARGER"
                                    :START1
                                    ZEBU::INDEX
                                    :END1
                                    ZEBU::NEW-INDEX)
                           (INCF ZEBU::INDEX 7)
                           (RETURN-FROM ZEBU::COMPARE NIL)))
                     (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                           ZEBU::INDEX)
                     (RETURN-FROM ZEBU::FINAL-RETURN T)))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))

(DEFUN TOK-DEBUT (STRING &OPTIONAL (ZEBU::START 0)
                  (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN (SETF ZEBU::*REGEX-GROUPINGS* 1)
               (BLOCK ZEBU::FINAL-RETURN
                 (BLOCK ZEBU::COMPARE
                   (LET ((ZEBU::INDEX ZEBU::START)
                         (LENGTH ZEBU::END))
                     (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                           (LIST ZEBU::INDEX NIL))
                     (LET ((ZEBU::NEW-INDEX (+ ZEBU::INDEX 5)))
                       (IF (< LENGTH ZEBU::NEW-INDEX)
                           (RETURN-FROM ZEBU::COMPARE NIL))
                       (IF (STRING= STRING
                                    "DEBUT"
                                    :START1
                                    ZEBU::INDEX
                                    :END1
                                    ZEBU::NEW-INDEX)
                           (INCF ZEBU::INDEX 5)
                           (RETURN-FROM ZEBU::COMPARE NIL)))
                     (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                           ZEBU::INDEX)
                     (RETURN-FROM ZEBU::FINAL-RETURN T)))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))

(DEFUN TOK-EN (STRING &OPTIONAL (ZEBU::START 0)
               (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN (SETF ZEBU::*REGEX-GROUPINGS* 1)
               (BLOCK ZEBU::FINAL-RETURN
                 (BLOCK ZEBU::COMPARE
                   (LET ((ZEBU::INDEX ZEBU::START)
                         (LENGTH ZEBU::END))
                     (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                           (LIST ZEBU::INDEX NIL))
                     (LET ((ZEBU::NEW-INDEX (+ ZEBU::INDEX 2)))
                       (IF (< LENGTH ZEBU::NEW-INDEX)
                           (RETURN-FROM ZEBU::COMPARE NIL))
                       (IF (STRING= STRING
                                    "EN"
                                    :START1
                                    ZEBU::INDEX
                                    :END1
                                    ZEBU::NEW-INDEX)
                           (INCF ZEBU::INDEX 2)
                           (RETURN-FROM ZEBU::COMPARE NIL)))
                     (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                           ZEBU::INDEX)
                     (RETURN-FROM ZEBU::FINAL-RETURN T)))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))

(DEFUN TOK-ET (STRING &OPTIONAL (ZEBU::START 0)
               (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN (SETF ZEBU::*REGEX-GROUPINGS* 1)
               (BLOCK ZEBU::FINAL-RETURN
                 (BLOCK ZEBU::COMPARE
                   (LET ((ZEBU::INDEX ZEBU::START)
                         (LENGTH ZEBU::END))
                     (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                           (LIST ZEBU::INDEX NIL))
                     (LET ((ZEBU::NEW-INDEX (+ ZEBU::INDEX 2)))
                       (IF (< LENGTH ZEBU::NEW-INDEX)
                           (RETURN-FROM ZEBU::COMPARE NIL))
                       (IF (STRING= STRING
                                    "ET"
                                    :START1
                                    ZEBU::INDEX
                                    :END1
                                    ZEBU::NEW-INDEX)
                           (INCF ZEBU::INDEX 2)
                           (RETURN-FROM ZEBU::COMPARE NIL)))
                     (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                           ZEBU::INDEX)
                     (RETURN-FROM ZEBU::FINAL-RETURN T)))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))

(DEFUN TOK-EXECUTER (STRING &OPTIONAL (ZEBU::START 0)
                     (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN (SETF ZEBU::*REGEX-GROUPINGS* 1)
               (BLOCK ZEBU::FINAL-RETURN
                 (BLOCK ZEBU::COMPARE
                   (LET ((ZEBU::INDEX ZEBU::START)
                         (LENGTH ZEBU::END))
                     (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                           (LIST ZEBU::INDEX NIL))
                     (LET ((ZEBU::NEW-INDEX (+ ZEBU::INDEX 8)))
                       (IF (< LENGTH ZEBU::NEW-INDEX)
                           (RETURN-FROM ZEBU::COMPARE NIL))
                       (IF (STRING= STRING
                                    "EXECUTER"
                                    :START1
                                    ZEBU::INDEX
                                    :END1
                                    ZEBU::NEW-INDEX)
                           (INCF ZEBU::INDEX 8)
                           (RETURN-FROM ZEBU::COMPARE NIL)))
                     (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                           ZEBU::INDEX)
                     (RETURN-FROM ZEBU::FINAL-RETURN T)))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))

(DEFUN TOK-FIN (STRING &OPTIONAL (ZEBU::START 0)
                (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN (SETF ZEBU::*REGEX-GROUPINGS* 1)
               (BLOCK ZEBU::FINAL-RETURN
                 (BLOCK ZEBU::COMPARE
                   (LET ((ZEBU::INDEX ZEBU::START)
                         (LENGTH ZEBU::END))
                     (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                           (LIST ZEBU::INDEX NIL))
                     (LET ((ZEBU::NEW-INDEX (+ ZEBU::INDEX 3)))
                       (IF (< LENGTH ZEBU::NEW-INDEX)
                           (RETURN-FROM ZEBU::COMPARE NIL))
                       (IF (STRING= STRING
                                    "FIN"
                                    :START1
                                    ZEBU::INDEX
                                    :END1
                                    ZEBU::NEW-INDEX)
                           (INCF ZEBU::INDEX 3)
                           (RETURN-FROM ZEBU::COMPARE NIL)))
                     (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                           ZEBU::INDEX)
                     (RETURN-FROM ZEBU::FINAL-RETURN T)))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))

(DEFUN TOK-FAIRE (STRING &OPTIONAL (ZEBU::START 0)
                  (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN (SETF ZEBU::*REGEX-GROUPINGS* 1)
               (BLOCK ZEBU::FINAL-RETURN
                 (BLOCK ZEBU::COMPARE
                   (LET ((ZEBU::INDEX ZEBU::START)
                         (LENGTH ZEBU::END))
                     (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                           (LIST ZEBU::INDEX NIL))
                     (LET ((ZEBU::NEW-INDEX (+ ZEBU::INDEX 5)))
                       (IF (< LENGTH ZEBU::NEW-INDEX)
                           (RETURN-FROM ZEBU::COMPARE NIL))
                       (IF (STRING= STRING
                                    "FAIRE"
                                    :START1
                                    ZEBU::INDEX
                                    :END1
                                    ZEBU::NEW-INDEX)
                           (INCF ZEBU::INDEX 5)
                           (RETURN-FROM ZEBU::COMPARE NIL)))
                     (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                           ZEBU::INDEX)
                     (RETURN-FROM ZEBU::FINAL-RETURN T)))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))

(DEFUN TOK-GARER (STRING &OPTIONAL (ZEBU::START 0)
                  (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN (SETF ZEBU::*REGEX-GROUPINGS* 1)
               (BLOCK ZEBU::FINAL-RETURN
                 (BLOCK ZEBU::COMPARE
                   (LET ((ZEBU::INDEX ZEBU::START)
                         (LENGTH ZEBU::END))
                     (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                           (LIST ZEBU::INDEX NIL))
                     (LET ((ZEBU::NEW-INDEX (+ ZEBU::INDEX 5)))
                       (IF (< LENGTH ZEBU::NEW-INDEX)
                           (RETURN-FROM ZEBU::COMPARE NIL))
                       (IF (STRING= STRING
                                    "GARER"
                                    :START1
                                    ZEBU::INDEX
                                    :END1
                                    ZEBU::NEW-INDEX)
                           (INCF ZEBU::INDEX 5)
                           (RETURN-FROM ZEBU::COMPARE NIL)))
                     (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                           ZEBU::INDEX)
                     (RETURN-FROM ZEBU::FINAL-RETURN T)))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))

(DEFUN TOK-JUSQUA (STRING &OPTIONAL (ZEBU::START 0)
                   (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN (SETF ZEBU::*REGEX-GROUPINGS* 1)
               (BLOCK ZEBU::FINAL-RETURN
                 (BLOCK ZEBU::COMPARE
                   (LET ((ZEBU::INDEX ZEBU::START)
                         (LENGTH ZEBU::END))
                     (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                           (LIST ZEBU::INDEX NIL))
                     (LET ((ZEBU::NEW-INDEX (+ ZEBU::INDEX 6)))
                       (IF (< LENGTH ZEBU::NEW-INDEX)
                           (RETURN-FROM ZEBU::COMPARE NIL))
                       (IF (STRING= STRING
                                    "JUSQUA"
                                    :START1
                                    ZEBU::INDEX
                                    :END1
                                    ZEBU::NEW-INDEX)
                           (INCF ZEBU::INDEX 6)
                           (RETURN-FROM ZEBU::COMPARE NIL)))
                     (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                           ZEBU::INDEX)
                     (RETURN-FROM ZEBU::FINAL-RETURN T)))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))

(DEFUN TOK-LIBERER (STRING &OPTIONAL (ZEBU::START 0)
                    (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN (SETF ZEBU::*REGEX-GROUPINGS* 1)
               (BLOCK ZEBU::FINAL-RETURN
                 (BLOCK ZEBU::COMPARE
                   (LET ((ZEBU::INDEX ZEBU::START)
                         (LENGTH ZEBU::END))
                     (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                           (LIST ZEBU::INDEX NIL))
                     (LET ((ZEBU::NEW-INDEX (+ ZEBU::INDEX 7)))
                       (IF (< LENGTH ZEBU::NEW-INDEX)
                           (RETURN-FROM ZEBU::COMPARE NIL))
                       (IF (STRING= STRING
                                    "LIBERER"
                                    :START1
                                    ZEBU::INDEX
                                    :END1
                                    ZEBU::NEW-INDEX)
                           (INCF ZEBU::INDEX 7)
                           (RETURN-FROM ZEBU::COMPARE NIL)))
                     (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                           ZEBU::INDEX)
                     (RETURN-FROM ZEBU::FINAL-RETURN T)))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))

(DEFUN TOK-LIRE (STRING &OPTIONAL (ZEBU::START 0)
                 (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN (SETF ZEBU::*REGEX-GROUPINGS* 1)
               (BLOCK ZEBU::FINAL-RETURN
                 (BLOCK ZEBU::COMPARE
                   (LET ((ZEBU::INDEX ZEBU::START)
                         (LENGTH ZEBU::END))
                     (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                           (LIST ZEBU::INDEX NIL))
                     (LET ((ZEBU::NEW-INDEX (+ ZEBU::INDEX 4)))
                       (IF (< LENGTH ZEBU::NEW-INDEX)
                           (RETURN-FROM ZEBU::COMPARE NIL))
                       (IF (STRING= STRING
                                    "LIRE"
                                    :START1
                                    ZEBU::INDEX
                                    :END1
                                    ZEBU::NEW-INDEX)
                           (INCF ZEBU::INDEX 4)
                           (RETURN-FROM ZEBU::COMPARE NIL)))
                     (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                           ZEBU::INDEX)
                     (RETURN-FROM ZEBU::FINAL-RETURN T)))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))

(DEFUN TOK-LOCAL (STRING &OPTIONAL (ZEBU::START 0)
                  (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN (SETF ZEBU::*REGEX-GROUPINGS* 1)
               (BLOCK ZEBU::FINAL-RETURN
                 (BLOCK ZEBU::COMPARE
                   (LET ((ZEBU::INDEX ZEBU::START)
                         (LENGTH ZEBU::END))
                     (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                           (LIST ZEBU::INDEX NIL))
                     (LET ((ZEBU::NEW-INDEX (+ ZEBU::INDEX 5)))
                       (IF (< LENGTH ZEBU::NEW-INDEX)
                           (RETURN-FROM ZEBU::COMPARE NIL))
                       (IF (STRING= STRING
                                    "LOCAL"
                                    :START1
                                    ZEBU::INDEX
                                    :END1
                                    ZEBU::NEW-INDEX)
                           (INCF ZEBU::INDEX 5)
                           (RETURN-FROM ZEBU::COMPARE NIL)))
                     (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                           ZEBU::INDEX)
                     (RETURN-FROM ZEBU::FINAL-RETURN T)))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))

(DEFUN TOK-NON (STRING &OPTIONAL (ZEBU::START 0)
                (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN (SETF ZEBU::*REGEX-GROUPINGS* 1)
               (BLOCK ZEBU::FINAL-RETURN
                 (BLOCK ZEBU::COMPARE
                   (LET ((ZEBU::INDEX ZEBU::START)
                         (LENGTH ZEBU::END))
                     (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                           (LIST ZEBU::INDEX NIL))
                     (LET ((ZEBU::NEW-INDEX (+ ZEBU::INDEX 3)))
                       (IF (< LENGTH ZEBU::NEW-INDEX)
                           (RETURN-FROM ZEBU::COMPARE NIL))
                       (IF (STRING= STRING
                                    "NON"
                                    :START1
                                    ZEBU::INDEX
                                    :END1
                                    ZEBU::NEW-INDEX)
                           (INCF ZEBU::INDEX 3)
                           (RETURN-FROM ZEBU::COMPARE NIL)))
                     (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                           ZEBU::INDEX)
                     (RETURN-FROM ZEBU::FINAL-RETURN T)))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))

(DEFUN TOK-OU (STRING &OPTIONAL (ZEBU::START 0)
               (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN (SETF ZEBU::*REGEX-GROUPINGS* 1)
               (BLOCK ZEBU::FINAL-RETURN
                 (BLOCK ZEBU::COMPARE
                   (LET ((ZEBU::INDEX ZEBU::START)
                         (LENGTH ZEBU::END))
                     (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                           (LIST ZEBU::INDEX NIL))
                     (LET ((ZEBU::NEW-INDEX (+ ZEBU::INDEX 2)))
                       (IF (< LENGTH ZEBU::NEW-INDEX)
                           (RETURN-FROM ZEBU::COMPARE NIL))
                       (IF (STRING= STRING
                                    "OU"
                                    :START1
                                    ZEBU::INDEX
                                    :END1
                                    ZEBU::NEW-INDEX)
                           (INCF ZEBU::INDEX 2)
                           (RETURN-FROM ZEBU::COMPARE NIL)))
                     (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                           ZEBU::INDEX)
                     (RETURN-FROM ZEBU::FINAL-RETURN T)))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))

(DEFUN TOK-PAS (STRING &OPTIONAL (ZEBU::START 0)
                (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN (SETF ZEBU::*REGEX-GROUPINGS* 1)
               (BLOCK ZEBU::FINAL-RETURN
                 (BLOCK ZEBU::COMPARE
                   (LET ((ZEBU::INDEX ZEBU::START)
                         (LENGTH ZEBU::END))
                     (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                           (LIST ZEBU::INDEX NIL))
                     (LET ((ZEBU::NEW-INDEX (+ ZEBU::INDEX 3)))
                       (IF (< LENGTH ZEBU::NEW-INDEX)
                           (RETURN-FROM ZEBU::COMPARE NIL))
                       (IF (STRING= STRING
                                    "PAS"
                                    :START1
                                    ZEBU::INDEX
                                    :END1
                                    ZEBU::NEW-INDEX)
                           (INCF ZEBU::INDEX 3)
                           (RETURN-FROM ZEBU::COMPARE NIL)))
                     (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                           ZEBU::INDEX)
                     (RETURN-FROM ZEBU::FINAL-RETURN T)))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))

(DEFUN TOK-PAUSE (STRING &OPTIONAL (ZEBU::START 0)
                  (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN (SETF ZEBU::*REGEX-GROUPINGS* 1)
               (BLOCK ZEBU::FINAL-RETURN
                 (BLOCK ZEBU::COMPARE
                   (LET ((ZEBU::INDEX ZEBU::START)
                         (LENGTH ZEBU::END))
                     (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                           (LIST ZEBU::INDEX NIL))
                     (LET ((ZEBU::NEW-INDEX (+ ZEBU::INDEX 5)))
                       (IF (< LENGTH ZEBU::NEW-INDEX)
                           (RETURN-FROM ZEBU::COMPARE NIL))
                       (IF (STRING= STRING
                                    "PAUSE"
                                    :START1
                                    ZEBU::INDEX
                                    :END1
                                    ZEBU::NEW-INDEX)
                           (INCF ZEBU::INDEX 5)
                           (RETURN-FROM ZEBU::COMPARE NIL)))
                     (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                           ZEBU::INDEX)
                     (RETURN-FROM ZEBU::FINAL-RETURN T)))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))

(DEFUN TOK-POUR (STRING &OPTIONAL (ZEBU::START 0)
                 (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN (SETF ZEBU::*REGEX-GROUPINGS* 1)
               (BLOCK ZEBU::FINAL-RETURN
                 (BLOCK ZEBU::COMPARE
                   (LET ((ZEBU::INDEX ZEBU::START)
                         (LENGTH ZEBU::END))
                     (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                           (LIST ZEBU::INDEX NIL))
                     (LET ((ZEBU::NEW-INDEX (+ ZEBU::INDEX 4)))
                       (IF (< LENGTH ZEBU::NEW-INDEX)
                           (RETURN-FROM ZEBU::COMPARE NIL))
                       (IF (STRING= STRING
                                    "POUR"
                                    :START1
                                    ZEBU::INDEX
                                    :END1
                                    ZEBU::NEW-INDEX)
                           (INCF ZEBU::INDEX 4)
                           (RETURN-FROM ZEBU::COMPARE NIL)))
                     (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                           ZEBU::INDEX)
                     (RETURN-FROM ZEBU::FINAL-RETURN T)))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))

(DEFUN TOK-PROCEDURE (STRING &OPTIONAL (ZEBU::START 0)
                      (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN (SETF ZEBU::*REGEX-GROUPINGS* 1)
               (BLOCK ZEBU::FINAL-RETURN
                 (BLOCK ZEBU::COMPARE
                   (LET ((ZEBU::INDEX ZEBU::START)
                         (LENGTH ZEBU::END))
                     (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                           (LIST ZEBU::INDEX NIL))
                     (LET ((ZEBU::NEW-INDEX (+ ZEBU::INDEX 9)))
                       (IF (< LENGTH ZEBU::NEW-INDEX)
                           (RETURN-FROM ZEBU::COMPARE NIL))
                       (IF (STRING= STRING
                                    "PROCEDURE"
                                    :START1
                                    ZEBU::INDEX
                                    :END1
                                    ZEBU::NEW-INDEX)
                           (INCF ZEBU::INDEX 9)
                           (RETURN-FROM ZEBU::COMPARE NIL)))
                     (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                           ZEBU::INDEX)
                     (RETURN-FROM ZEBU::FINAL-RETURN T)))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))

(DEFUN TOK-QUE (STRING &OPTIONAL (ZEBU::START 0)
                (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN (SETF ZEBU::*REGEX-GROUPINGS* 1)
               (BLOCK ZEBU::FINAL-RETURN
                 (BLOCK ZEBU::COMPARE
                   (LET ((ZEBU::INDEX ZEBU::START)
                         (LENGTH ZEBU::END))
                     (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                           (LIST ZEBU::INDEX NIL))
                     (LET ((ZEBU::NEW-INDEX (+ ZEBU::INDEX 3)))
                       (IF (< LENGTH ZEBU::NEW-INDEX)
                           (RETURN-FROM ZEBU::COMPARE NIL))
                       (IF (STRING= STRING
                                    "QUE"
                                    :START1
                                    ZEBU::INDEX
                                    :END1
                                    ZEBU::NEW-INDEX)
                           (INCF ZEBU::INDEX 3)
                           (RETURN-FROM ZEBU::COMPARE NIL)))
                     (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                           ZEBU::INDEX)
                     (RETURN-FROM ZEBU::FINAL-RETURN T)))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))

(DEFUN TOK-RESULTAT (STRING &OPTIONAL (ZEBU::START 0)
                     (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN (SETF ZEBU::*REGEX-GROUPINGS* 1)
               (BLOCK ZEBU::FINAL-RETURN
                 (BLOCK ZEBU::COMPARE
                   (LET ((ZEBU::INDEX ZEBU::START)
                         (LENGTH ZEBU::END))
                     (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                           (LIST ZEBU::INDEX NIL))
                     (LET ((ZEBU::NEW-INDEX (+ ZEBU::INDEX 8)))
                       (IF (< LENGTH ZEBU::NEW-INDEX)
                           (RETURN-FROM ZEBU::COMPARE NIL))
                       (IF (STRING= STRING
                                    "RESULTAT"
                                    :START1
                                    ZEBU::INDEX
                                    :END1
                                    ZEBU::NEW-INDEX)
                           (INCF ZEBU::INDEX 8)
                           (RETURN-FROM ZEBU::COMPARE NIL)))
                     (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                           ZEBU::INDEX)
                     (RETURN-FROM ZEBU::FINAL-RETURN T)))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))

(DEFUN TOK-RETOUR (STRING &OPTIONAL (ZEBU::START 0)
                   (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN (SETF ZEBU::*REGEX-GROUPINGS* 1)
               (BLOCK ZEBU::FINAL-RETURN
                 (BLOCK ZEBU::COMPARE
                   (LET ((ZEBU::INDEX ZEBU::START)
                         (LENGTH ZEBU::END))
                     (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                           (LIST ZEBU::INDEX NIL))
                     (LET ((ZEBU::NEW-INDEX (+ ZEBU::INDEX 6)))
                       (IF (< LENGTH ZEBU::NEW-INDEX)
                           (RETURN-FROM ZEBU::COMPARE NIL))
                       (IF (STRING= STRING
                                    "RETOUR"
                                    :START1
                                    ZEBU::INDEX
                                    :END1
                                    ZEBU::NEW-INDEX)
                           (INCF ZEBU::INDEX 6)
                           (RETURN-FROM ZEBU::COMPARE NIL)))
                     (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                           ZEBU::INDEX)
                     (RETURN-FROM ZEBU::FINAL-RETURN T)))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))

(DEFUN TOK-SI (STRING &OPTIONAL (ZEBU::START 0)
               (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN (SETF ZEBU::*REGEX-GROUPINGS* 1)
               (BLOCK ZEBU::FINAL-RETURN
                 (BLOCK ZEBU::COMPARE
                   (LET ((ZEBU::INDEX ZEBU::START)
                         (LENGTH ZEBU::END))
                     (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                           (LIST ZEBU::INDEX NIL))
                     (LET ((ZEBU::NEW-INDEX (+ ZEBU::INDEX 2)))
                       (IF (< LENGTH ZEBU::NEW-INDEX)
                           (RETURN-FROM ZEBU::COMPARE NIL))
                       (IF (STRING= STRING
                                    "SI"
                                    :START1
                                    ZEBU::INDEX
                                    :END1
                                    ZEBU::NEW-INDEX)
                           (INCF ZEBU::INDEX 2)
                           (RETURN-FROM ZEBU::COMPARE NIL)))
                     (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                           ZEBU::INDEX)
                     (RETURN-FROM ZEBU::FINAL-RETURN T)))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))

(DEFUN TOK-SINON (STRING &OPTIONAL (ZEBU::START 0)
                  (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN (SETF ZEBU::*REGEX-GROUPINGS* 1)
               (BLOCK ZEBU::FINAL-RETURN
                 (BLOCK ZEBU::COMPARE
                   (LET ((ZEBU::INDEX ZEBU::START)
                         (LENGTH ZEBU::END))
                     (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                           (LIST ZEBU::INDEX NIL))
                     (LET ((ZEBU::NEW-INDEX (+ ZEBU::INDEX 5)))
                       (IF (< LENGTH ZEBU::NEW-INDEX)
                           (RETURN-FROM ZEBU::COMPARE NIL))
                       (IF (STRING= STRING
                                    "SINON"
                                    :START1
                                    ZEBU::INDEX
                                    :END1
                                    ZEBU::NEW-INDEX)
                           (INCF ZEBU::INDEX 5)
                           (RETURN-FROM ZEBU::COMPARE NIL)))
                     (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                           ZEBU::INDEX)
                     (RETURN-FROM ZEBU::FINAL-RETURN T)))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))

(DEFUN TOK-SUPPRIMER (STRING &OPTIONAL (ZEBU::START 0)
                      (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN (SETF ZEBU::*REGEX-GROUPINGS* 1)
               (BLOCK ZEBU::FINAL-RETURN
                 (BLOCK ZEBU::COMPARE
                   (LET ((ZEBU::INDEX ZEBU::START)
                         (LENGTH ZEBU::END))
                     (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                           (LIST ZEBU::INDEX NIL))
                     (LET ((ZEBU::NEW-INDEX (+ ZEBU::INDEX 9)))
                       (IF (< LENGTH ZEBU::NEW-INDEX)
                           (RETURN-FROM ZEBU::COMPARE NIL))
                       (IF (STRING= STRING
                                    "SUPPRIMER"
                                    :START1
                                    ZEBU::INDEX
                                    :END1
                                    ZEBU::NEW-INDEX)
                           (INCF ZEBU::INDEX 9)
                           (RETURN-FROM ZEBU::COMPARE NIL)))
                     (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                           ZEBU::INDEX)
                     (RETURN-FROM ZEBU::FINAL-RETURN T)))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))

(DEFUN TOK-TABLEAU (STRING &OPTIONAL (ZEBU::START 0)
                    (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN (SETF ZEBU::*REGEX-GROUPINGS* 1)
               (BLOCK ZEBU::FINAL-RETURN
                 (BLOCK ZEBU::COMPARE
                   (LET ((ZEBU::INDEX ZEBU::START)
                         (LENGTH ZEBU::END))
                     (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                           (LIST ZEBU::INDEX NIL))
                     (LET ((ZEBU::NEW-INDEX (+ ZEBU::INDEX 7)))
                       (IF (< LENGTH ZEBU::NEW-INDEX)
                           (RETURN-FROM ZEBU::COMPARE NIL))
                       (IF (STRING= STRING
                                    "TABLEAU"
                                    :START1
                                    ZEBU::INDEX
                                    :END1
                                    ZEBU::NEW-INDEX)
                           (INCF ZEBU::INDEX 7)
                           (RETURN-FROM ZEBU::COMPARE NIL)))
                     (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                           ZEBU::INDEX)
                     (RETURN-FROM ZEBU::FINAL-RETURN T)))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))

(DEFUN TOK-TANT (STRING &OPTIONAL (ZEBU::START 0)
                 (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN (SETF ZEBU::*REGEX-GROUPINGS* 1)
               (BLOCK ZEBU::FINAL-RETURN
                 (BLOCK ZEBU::COMPARE
                   (LET ((ZEBU::INDEX ZEBU::START)
                         (LENGTH ZEBU::END))
                     (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                           (LIST ZEBU::INDEX NIL))
                     (LET ((ZEBU::NEW-INDEX (+ ZEBU::INDEX 4)))
                       (IF (< LENGTH ZEBU::NEW-INDEX)
                           (RETURN-FROM ZEBU::COMPARE NIL))
                       (IF (STRING= STRING
                                    "TANT"
                                    :START1
                                    ZEBU::INDEX
                                    :END1
                                    ZEBU::NEW-INDEX)
                           (INCF ZEBU::INDEX 4)
                           (RETURN-FROM ZEBU::COMPARE NIL)))
                     (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                           ZEBU::INDEX)
                     (RETURN-FROM ZEBU::FINAL-RETURN T)))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))

(DEFUN TOK-TERMINER (STRING &OPTIONAL (ZEBU::START 0)
                     (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN (SETF ZEBU::*REGEX-GROUPINGS* 1)
               (BLOCK ZEBU::FINAL-RETURN
                 (BLOCK ZEBU::COMPARE
                   (LET ((ZEBU::INDEX ZEBU::START)
                         (LENGTH ZEBU::END))
                     (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                           (LIST ZEBU::INDEX NIL))
                     (LET ((ZEBU::NEW-INDEX (+ ZEBU::INDEX 8)))
                       (IF (< LENGTH ZEBU::NEW-INDEX)
                           (RETURN-FROM ZEBU::COMPARE NIL))
                       (IF (STRING= STRING
                                    "TERMINER"
                                    :START1
                                    ZEBU::INDEX
                                    :END1
                                    ZEBU::NEW-INDEX)
                           (INCF ZEBU::INDEX 8)
                           (RETURN-FROM ZEBU::COMPARE NIL)))
                     (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                           ZEBU::INDEX)
                     (RETURN-FROM ZEBU::FINAL-RETURN T)))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))

(DEFUN TOK-X (STRING &OPTIONAL (ZEBU::START 0)
              (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN (SETF ZEBU::*REGEX-GROUPINGS* 1)
               (BLOCK ZEBU::FINAL-RETURN
                 (BLOCK ZEBU::COMPARE
                   (LET ((ZEBU::INDEX ZEBU::START)
                         (LENGTH ZEBU::END))
                     (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                           (LIST ZEBU::INDEX NIL))
                     (IF (AND (< ZEBU::INDEX LENGTH)
                              (EQL (CHAR STRING ZEBU::INDEX) #\X))
                         (INCF ZEBU::INDEX)
                         (RETURN-FROM ZEBU::COMPARE NIL))
                     (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                           ZEBU::INDEX)
                     (RETURN-FROM ZEBU::FINAL-RETURN T)))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))

(DEFUN TOK-C (STRING &OPTIONAL (ZEBU::START 0)
              (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN (SETF ZEBU::*REGEX-GROUPINGS* 1)
               (BLOCK ZEBU::FINAL-RETURN
                 (BLOCK ZEBU::COMPARE
                   (LET ((ZEBU::INDEX ZEBU::START)
                         (LENGTH ZEBU::END))
                     (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                           (LIST ZEBU::INDEX NIL))
                     (IF (AND (< ZEBU::INDEX LENGTH)
                              (EQL (CHAR STRING ZEBU::INDEX) #\C))
                         (INCF ZEBU::INDEX)
                         (RETURN-FROM ZEBU::COMPARE NIL))
                     (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                           ZEBU::INDEX)
                     (RETURN-FROM ZEBU::FINAL-RETURN T)))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))

(DEFUN TOK-L (STRING &OPTIONAL (ZEBU::START 0)
              (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN (SETF ZEBU::*REGEX-GROUPINGS* 1)
               (BLOCK ZEBU::FINAL-RETURN
                 (BLOCK ZEBU::COMPARE
                   (LET ((ZEBU::INDEX ZEBU::START)
                         (LENGTH ZEBU::END))
                     (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                           (LIST ZEBU::INDEX NIL))
                     (IF (AND (< ZEBU::INDEX LENGTH)
                              (EQL (CHAR STRING ZEBU::INDEX) #\L))
                         (INCF ZEBU::INDEX)
                         (RETURN-FROM ZEBU::COMPARE NIL))
                     (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                           ZEBU::INDEX)
                     (RETURN-FROM ZEBU::FINAL-RETURN T)))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))

(DEFUN TOK-F (STRING &OPTIONAL (ZEBU::START 0)
              (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN (SETF ZEBU::*REGEX-GROUPINGS* 1)
               (BLOCK ZEBU::FINAL-RETURN
                 (BLOCK ZEBU::COMPARE
                   (LET ((ZEBU::INDEX ZEBU::START)
                         (LENGTH ZEBU::END))
                     (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                           (LIST ZEBU::INDEX NIL))
                     (IF (AND (< ZEBU::INDEX LENGTH)
                              (EQL (CHAR STRING ZEBU::INDEX) #\F))
                         (INCF ZEBU::INDEX)
                         (RETURN-FROM ZEBU::COMPARE NIL))
                     (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                           ZEBU::INDEX)
                     (RETURN-FROM ZEBU::FINAL-RETURN T)))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))

(DEFUN TOK-E (STRING &OPTIONAL (ZEBU::START 0)
              (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN (SETF ZEBU::*REGEX-GROUPINGS* 1)
               (BLOCK ZEBU::FINAL-RETURN
                 (BLOCK ZEBU::COMPARE
                   (LET ((ZEBU::INDEX ZEBU::START)
                         (LENGTH ZEBU::END))
                     (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                           (LIST ZEBU::INDEX NIL))
                     (IF (AND (< ZEBU::INDEX LENGTH)
                              (EQL (CHAR STRING ZEBU::INDEX) #\E))
                         (INCF ZEBU::INDEX)
                         (RETURN-FROM ZEBU::COMPARE NIL))
                     (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                           ZEBU::INDEX)
                     (RETURN-FROM ZEBU::FINAL-RETURN T)))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))

(DEFUN TOK-U (STRING &OPTIONAL (ZEBU::START 0)
              (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN (SETF ZEBU::*REGEX-GROUPINGS* 1)
               (BLOCK ZEBU::FINAL-RETURN
                 (BLOCK ZEBU::COMPARE
                   (LET ((ZEBU::INDEX ZEBU::START)
                         (LENGTH ZEBU::END))
                     (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                           (LIST ZEBU::INDEX NIL))
                     (IF (AND (< ZEBU::INDEX LENGTH)
                              (EQL (CHAR STRING ZEBU::INDEX) #\U))
                         (INCF ZEBU::INDEX)
                         (RETURN-FROM ZEBU::COMPARE NIL))
                     (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                           ZEBU::INDEX)
                     (RETURN-FROM ZEBU::FINAL-RETURN T)))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))

(DEFUN TOK-GT (STRING &OPTIONAL (ZEBU::START 0)
               (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN (SETF ZEBU::*REGEX-GROUPINGS* 1)
               (BLOCK ZEBU::FINAL-RETURN
                 (BLOCK ZEBU::COMPARE
                   (LET ((ZEBU::INDEX ZEBU::START)
                         (LENGTH ZEBU::END))
                     (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                           (LIST ZEBU::INDEX NIL))
                     (IF (AND (< ZEBU::INDEX LENGTH)
                              (EQL (CHAR STRING ZEBU::INDEX) #\>))
                         (INCF ZEBU::INDEX)
                         (RETURN-FROM ZEBU::COMPARE NIL))
                     (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                           ZEBU::INDEX)
                     (RETURN-FROM ZEBU::FINAL-RETURN T)))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))

(DEFUN TOK-GE (STRING &OPTIONAL (ZEBU::START 0)
               (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN (SETF ZEBU::*REGEX-GROUPINGS* 1)
               (BLOCK ZEBU::FINAL-RETURN
                 (BLOCK ZEBU::COMPARE
                   (LET ((ZEBU::INDEX ZEBU::START)
                         (LENGTH ZEBU::END))
                     (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                           (LIST ZEBU::INDEX NIL))
                     (LET ((ZEBU::NEW-INDEX (+ ZEBU::INDEX 2)))
                       (IF (< LENGTH ZEBU::NEW-INDEX)
                           (RETURN-FROM ZEBU::COMPARE NIL))
                       (IF (STRING= STRING
                                    ">="
                                    :START1
                                    ZEBU::INDEX
                                    :END1
                                    ZEBU::NEW-INDEX)
                           (INCF ZEBU::INDEX 2)
                           (RETURN-FROM ZEBU::COMPARE NIL)))
                     (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                           ZEBU::INDEX)
                     (RETURN-FROM ZEBU::FINAL-RETURN T)))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))

(DEFUN TOK-LT (STRING &OPTIONAL (ZEBU::START 0)
               (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN (SETF ZEBU::*REGEX-GROUPINGS* 1)
               (BLOCK ZEBU::FINAL-RETURN
                 (BLOCK ZEBU::COMPARE
                   (LET ((ZEBU::INDEX ZEBU::START)
                         (LENGTH ZEBU::END))
                     (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                           (LIST ZEBU::INDEX NIL))
                     (IF (AND (< ZEBU::INDEX LENGTH)
                              (EQL (CHAR STRING ZEBU::INDEX) #\<))
                         (INCF ZEBU::INDEX)
                         (RETURN-FROM ZEBU::COMPARE NIL))
                     (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                           ZEBU::INDEX)
                     (RETURN-FROM ZEBU::FINAL-RETURN T)))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))

(DEFUN TOK-LE (STRING &OPTIONAL (ZEBU::START 0)
               (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN (SETF ZEBU::*REGEX-GROUPINGS* 1)
               (BLOCK ZEBU::FINAL-RETURN
                 (BLOCK ZEBU::COMPARE
                   (LET ((ZEBU::INDEX ZEBU::START)
                         (LENGTH ZEBU::END))
                     (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                           (LIST ZEBU::INDEX NIL))
                     (LET ((ZEBU::NEW-INDEX (+ ZEBU::INDEX 2)))
                       (IF (< LENGTH ZEBU::NEW-INDEX)
                           (RETURN-FROM ZEBU::COMPARE NIL))
                       (IF (STRING= STRING
                                    "<="
                                    :START1
                                    ZEBU::INDEX
                                    :END1
                                    ZEBU::NEW-INDEX)
                           (INCF ZEBU::INDEX 2)
                           (RETURN-FROM ZEBU::COMPARE NIL)))
                     (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                           ZEBU::INDEX)
                     (RETURN-FROM ZEBU::FINAL-RETURN T)))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))

(DEFUN TOK-NE (STRING &OPTIONAL (ZEBU::START 0)
               (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN (SETF ZEBU::*REGEX-GROUPINGS* 1)
               (BLOCK ZEBU::FINAL-RETURN
                 (BLOCK ZEBU::COMPARE
                   (LET ((ZEBU::INDEX ZEBU::START)
                         (LENGTH ZEBU::END))
                     (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                           (LIST ZEBU::INDEX NIL))
                     (IF (AND (< ZEBU::INDEX LENGTH)
                              (EQL (CHAR STRING ZEBU::INDEX) #\#))
                         (INCF ZEBU::INDEX)
                         (RETURN-FROM ZEBU::COMPARE NIL))
                     (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                           ZEBU::INDEX)
                     (RETURN-FROM ZEBU::FINAL-RETURN T)))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))

(DEFUN TOK-EQ (STRING &OPTIONAL (ZEBU::START 0)
               (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN (SETF ZEBU::*REGEX-GROUPINGS* 1)
               (BLOCK ZEBU::FINAL-RETURN
                 (BLOCK ZEBU::COMPARE
                   (LET ((ZEBU::INDEX ZEBU::START)
                         (LENGTH ZEBU::END))
                     (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                           (LIST ZEBU::INDEX NIL))
                     (IF (AND (< ZEBU::INDEX LENGTH)
                              (EQL (CHAR STRING ZEBU::INDEX) #\=))
                         (INCF ZEBU::INDEX)
                         (RETURN-FROM ZEBU::COMPARE NIL))
                     (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                           ZEBU::INDEX)
                     (RETURN-FROM ZEBU::FINAL-RETURN T)))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))

(DEFUN TOK-AFFIC (STRING &OPTIONAL (ZEBU::START 0)
                  (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN (SETF ZEBU::*REGEX-GROUPINGS* 1)
               (BLOCK ZEBU::FINAL-RETURN
                 (BLOCK ZEBU::COMPARE
                   (LET ((ZEBU::INDEX ZEBU::START)
                         (LENGTH ZEBU::END))
                     (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                           (LIST ZEBU::INDEX NIL))
                     (IF (AND (< ZEBU::INDEX LENGTH)
                              (EQL (CHAR STRING ZEBU::INDEX) #\?))
                         (INCF ZEBU::INDEX)
                         (RETURN-FROM ZEBU::COMPARE NIL))
                     (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                           ZEBU::INDEX)
                     (RETURN-FROM ZEBU::FINAL-RETURN T)))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))

(DEFUN TOK-PLUS (STRING &OPTIONAL (ZEBU::START 0)
                 (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN (SETF ZEBU::*REGEX-GROUPINGS* 1)
               (BLOCK ZEBU::FINAL-RETURN
                 (BLOCK ZEBU::COMPARE
                   (LET ((ZEBU::INDEX ZEBU::START)
                         (LENGTH ZEBU::END))
                     (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                           (LIST ZEBU::INDEX NIL))
                     (IF (AND (< ZEBU::INDEX LENGTH)
                              (EQL (CHAR STRING ZEBU::INDEX) #\+))
                         (INCF ZEBU::INDEX)
                         (RETURN-FROM ZEBU::COMPARE NIL))
                     (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                           ZEBU::INDEX)
                     (RETURN-FROM ZEBU::FINAL-RETURN T)))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))

(DEFUN TOK-MOINS (STRING &OPTIONAL (ZEBU::START 0)
                  (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN (SETF ZEBU::*REGEX-GROUPINGS* 1)
               (BLOCK ZEBU::FINAL-RETURN
                 (BLOCK ZEBU::COMPARE
                   (LET ((ZEBU::INDEX ZEBU::START)
                         (LENGTH ZEBU::END))
                     (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                           (LIST ZEBU::INDEX NIL))
                     (IF (AND (< ZEBU::INDEX LENGTH)
                              (EQL (CHAR STRING ZEBU::INDEX) #\-))
                         (INCF ZEBU::INDEX)
                         (RETURN-FROM ZEBU::COMPARE NIL))
                     (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                           ZEBU::INDEX)
                     (RETURN-FROM ZEBU::FINAL-RETURN T)))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))

(DEFUN TOK-CONCAT (STRING &OPTIONAL (ZEBU::START 0)
                   (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN (SETF ZEBU::*REGEX-GROUPINGS* 1)
               (BLOCK ZEBU::FINAL-RETURN
                 (BLOCK ZEBU::COMPARE
                   (LET ((ZEBU::INDEX ZEBU::START)
                         (LENGTH ZEBU::END))
                     (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                           (LIST ZEBU::INDEX NIL))
                     (IF (AND (< ZEBU::INDEX LENGTH)
                              (EQL (CHAR STRING ZEBU::INDEX) #\!))
                         (INCF ZEBU::INDEX)
                         (RETURN-FROM ZEBU::COMPARE NIL))
                     (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                           ZEBU::INDEX)
                     (RETURN-FROM ZEBU::FINAL-RETURN T)))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))

(DEFUN TOK-FOIS (STRING &OPTIONAL (ZEBU::START 0)
                 (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN (SETF ZEBU::*REGEX-GROUPINGS* 1)
               (BLOCK ZEBU::FINAL-RETURN
                 (BLOCK ZEBU::COMPARE
                   (LET ((ZEBU::INDEX ZEBU::START)
                         (LENGTH ZEBU::END))
                     (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                           (LIST ZEBU::INDEX NIL))
                     (IF (AND (< ZEBU::INDEX LENGTH)
                              (EQL (CHAR STRING ZEBU::INDEX) #\*))
                         (INCF ZEBU::INDEX)
                         (RETURN-FROM ZEBU::COMPARE NIL))
                     (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                           ZEBU::INDEX)
                     (RETURN-FROM ZEBU::FINAL-RETURN T)))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))

(DEFUN TOK-DIVISE (STRING &OPTIONAL (ZEBU::START 0)
                   (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN (SETF ZEBU::*REGEX-GROUPINGS* 1)
               (BLOCK ZEBU::FINAL-RETURN
                 (BLOCK ZEBU::COMPARE
                   (LET ((ZEBU::INDEX ZEBU::START)
                         (LENGTH ZEBU::END))
                     (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                           (LIST ZEBU::INDEX NIL))
                     (IF (AND (< ZEBU::INDEX LENGTH)
                              (EQL (CHAR STRING ZEBU::INDEX) #\/))
                         (INCF ZEBU::INDEX)
                         (RETURN-FROM ZEBU::COMPARE NIL))
                     (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                           ZEBU::INDEX)
                     (RETURN-FROM ZEBU::FINAL-RETURN T)))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))

(DEFUN TOK-PUISSANCE (STRING &OPTIONAL (ZEBU::START 0)
                      (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN (SETF ZEBU::*REGEX-GROUPINGS* 1)
               (BLOCK ZEBU::FINAL-RETURN
                 (BLOCK ZEBU::COMPARE
                   (LET ((ZEBU::INDEX ZEBU::START)
                         (LENGTH ZEBU::END))
                     (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                           (LIST ZEBU::INDEX NIL))
                     (IF (AND (< ZEBU::INDEX LENGTH)
                              (EQL (CHAR STRING ZEBU::INDEX) #\^))
                         (INCF ZEBU::INDEX)
                         (RETURN-FROM ZEBU::COMPARE NIL))
                     (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                           ZEBU::INDEX)
                     (RETURN-FROM ZEBU::FINAL-RETURN T)))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))

(DEFUN TOK-VIRGULE (STRING &OPTIONAL (ZEBU::START 0)
                    (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN (SETF ZEBU::*REGEX-GROUPINGS* 1)
               (BLOCK ZEBU::FINAL-RETURN
                 (BLOCK ZEBU::COMPARE
                   (LET ((ZEBU::INDEX ZEBU::START)
                         (LENGTH ZEBU::END))
                     (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                           (LIST ZEBU::INDEX NIL))
                     (IF (AND (< ZEBU::INDEX LENGTH)
                              (EQL (CHAR STRING ZEBU::INDEX) #\,))
                         (INCF ZEBU::INDEX)
                         (RETURN-FROM ZEBU::COMPARE NIL))
                     (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                           ZEBU::INDEX)
                     (RETURN-FROM ZEBU::FINAL-RETURN T)))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))

(DEFUN TOK-POINT (STRING &OPTIONAL (ZEBU::START 0)
                  (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN (SETF ZEBU::*REGEX-GROUPINGS* 1)
               (BLOCK ZEBU::FINAL-RETURN
                 (BLOCK ZEBU::COMPARE
                   (LET ((ZEBU::INDEX ZEBU::START)
                         (LENGTH ZEBU::END))
                     (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                           (LIST ZEBU::INDEX NIL))
                     (IF (AND (< ZEBU::INDEX LENGTH)
                              (EQL (CHAR STRING ZEBU::INDEX) #\.))
                         (INCF ZEBU::INDEX)
                         (RETURN-FROM ZEBU::COMPARE NIL))
                     (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                           ZEBU::INDEX)
                     (RETURN-FROM ZEBU::FINAL-RETURN T)))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))

(DEFUN TOK-PARGAUCHE (STRING &OPTIONAL (ZEBU::START 0)
                      (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN (SETF ZEBU::*REGEX-GROUPINGS* 1)
               (BLOCK ZEBU::FINAL-RETURN
                 (BLOCK ZEBU::COMPARE
                   (LET ((ZEBU::INDEX ZEBU::START)
                         (LENGTH ZEBU::END))
                     (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                           (LIST ZEBU::INDEX NIL))
                     (IF (AND (< ZEBU::INDEX LENGTH)
                              (EQL (CHAR STRING ZEBU::INDEX) #\())
                         (INCF ZEBU::INDEX)
                         (RETURN-FROM ZEBU::COMPARE NIL))
                     (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                           ZEBU::INDEX)
                     (RETURN-FROM ZEBU::FINAL-RETURN T)))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))

(DEFUN TOK-PARDROITE (STRING &OPTIONAL (ZEBU::START 0)
                      (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN (SETF ZEBU::*REGEX-GROUPINGS* 1)
               (BLOCK ZEBU::FINAL-RETURN
                 (BLOCK ZEBU::COMPARE
                   (LET ((ZEBU::INDEX ZEBU::START)
                         (LENGTH ZEBU::END))
                     (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                           (LIST ZEBU::INDEX NIL))
                     (IF (AND (< ZEBU::INDEX LENGTH)
                              (EQL (CHAR STRING ZEBU::INDEX) #\)))
                         (INCF ZEBU::INDEX)
                         (RETURN-FROM ZEBU::COMPARE NIL))
                     (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                           ZEBU::INDEX)
                     (RETURN-FROM ZEBU::FINAL-RETURN T)))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))

(DEFUN TOK-CROGAUCHE (STRING &OPTIONAL (ZEBU::START 0)
                      (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN (SETF ZEBU::*REGEX-GROUPINGS* 1)
               (BLOCK ZEBU::FINAL-RETURN
                 (BLOCK ZEBU::COMPARE
                   (LET ((ZEBU::INDEX ZEBU::START)
                         (LENGTH ZEBU::END))
                     (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                           (LIST ZEBU::INDEX NIL))
                     (IF (AND (< ZEBU::INDEX LENGTH)
                              (EQL (CHAR STRING ZEBU::INDEX) #\[))
                         (INCF ZEBU::INDEX)
                         (RETURN-FROM ZEBU::COMPARE NIL))
                     (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                           ZEBU::INDEX)
                     (RETURN-FROM ZEBU::FINAL-RETURN T)))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))

(DEFUN TOK-CRODROITE (STRING &OPTIONAL (ZEBU::START 0)
                      (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN (SETF ZEBU::*REGEX-GROUPINGS* 1)
               (BLOCK ZEBU::FINAL-RETURN
                 (BLOCK ZEBU::COMPARE
                   (LET ((ZEBU::INDEX ZEBU::START)
                         (LENGTH ZEBU::END))
                     (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                           (LIST ZEBU::INDEX NIL))
                     (IF (AND (< ZEBU::INDEX LENGTH)
                              (EQL (CHAR STRING ZEBU::INDEX) #\]))
                         (INCF ZEBU::INDEX)
                         (RETURN-FROM ZEBU::COMPARE NIL))
                     (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                           ZEBU::INDEX)
                     (RETURN-FROM ZEBU::FINAL-RETURN T)))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))

(DEFUN TOK-FLECHE (STRING &OPTIONAL (ZEBU::START 0)
                   (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN (SETF ZEBU::*REGEX-GROUPINGS* 1)
               (BLOCK ZEBU::FINAL-RETURN
                 (BLOCK ZEBU::COMPARE
                   (LET ((ZEBU::INDEX ZEBU::START)
                         (LENGTH ZEBU::END))
                     (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                           (LIST ZEBU::INDEX NIL))
                     (IF (AND (< ZEBU::INDEX LENGTH)
                              (EQL (CHAR STRING ZEBU::INDEX) #\_))
                         (INCF ZEBU::INDEX)
                         (RETURN-FROM ZEBU::COMPARE NIL))
                     (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                           ZEBU::INDEX)
                     (RETURN-FROM ZEBU::FINAL-RETURN T)))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))

(DEFUN TOK-PTVIRG (STRING &OPTIONAL (ZEBU::START 0)
                   (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN (SETF ZEBU::*REGEX-GROUPINGS* 1)
               (BLOCK ZEBU::FINAL-RETURN
                 (BLOCK ZEBU::COMPARE
                   (LET ((ZEBU::INDEX ZEBU::START)
                         (LENGTH ZEBU::END))
                     (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                           (LIST ZEBU::INDEX NIL))
                     (IF (AND (< ZEBU::INDEX LENGTH)
                              (EQL (CHAR STRING ZEBU::INDEX) #\;))
                         (INCF ZEBU::INDEX)
                         (RETURN-FROM ZEBU::COMPARE NIL))
                     (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                           ZEBU::INDEX)
                     (RETURN-FROM ZEBU::FINAL-RETURN T)))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))

(DEFUN TOK-NUMERO (STRING &OPTIONAL (ZEBU::START 0)
                   (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN (SETF ZEBU::*REGEX-GROUPINGS* 1)
               (BLOCK ZEBU::FINAL-RETURN
                 (BLOCK ZEBU::COMPARE
                   (LET ((ZEBU::INDEX ZEBU::START)
                         (LENGTH ZEBU::END))
                     (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                           (LIST ZEBU::INDEX NIL))
                     (LET ((ZEBU::NEW-INDEX (+ ZEBU::INDEX 8)))
                       (IF (< LENGTH ZEBU::NEW-INDEX)
                           (RETURN-FROM ZEBU::COMPARE NIL))
                       (IF (STRING= STRING
                                    "{NUMERO}"
                                    :START1
                                    ZEBU::INDEX
                                    :END1
                                    ZEBU::NEW-INDEX)
                           (INCF ZEBU::INDEX 8)
                           (RETURN-FROM ZEBU::COMPARE NIL)))
                     (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                           ZEBU::INDEX)
                     (RETURN-FROM ZEBU::FINAL-RETURN T)))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))

(DEFUN TOK-NOMBRE (STRING &OPTIONAL (ZEBU::START 0)
                   (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN (SETF ZEBU::*REGEX-GROUPINGS* 1)
               (BLOCK ZEBU::FINAL-RETURN
                 (BLOCK ZEBU::COMPARE
                   (LET ((ZEBU::INDEX ZEBU::START)
                         (LENGTH ZEBU::END))
                     (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                           (LIST ZEBU::INDEX NIL))
                     (LET ((ZEBU::NEW-INDEX (+ ZEBU::INDEX 8)))
                       (IF (< LENGTH ZEBU::NEW-INDEX)
                           (RETURN-FROM ZEBU::COMPARE NIL))
                       (IF (STRING= STRING
                                    "{NOMBRE}"
                                    :START1
                                    ZEBU::INDEX
                                    :END1
                                    ZEBU::NEW-INDEX)
                           (INCF ZEBU::INDEX 8)
                           (RETURN-FROM ZEBU::COMPARE NIL)))
                     (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                           ZEBU::INDEX)
                     (RETURN-FROM ZEBU::FINAL-RETURN T)))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))

(DEFUN TOK-LITCHAINE (STRING &OPTIONAL (ZEBU::START 0)
                      (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN (SETF ZEBU::*REGEX-GROUPINGS* 1)
               (BLOCK ZEBU::FINAL-RETURN
                 (BLOCK ZEBU::COMPARE
                   (LET ((ZEBU::INDEX ZEBU::START)
                         (LENGTH ZEBU::END))
                     (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                           (LIST ZEBU::INDEX NIL))
                     (LET ((ZEBU::NEW-INDEX (+ ZEBU::INDEX 8)))
                       (IF (< LENGTH ZEBU::NEW-INDEX)
                           (RETURN-FROM ZEBU::COMPARE NIL))
                       (IF (STRING= STRING
                                    "{CHAINE}"
                                    :START1
                                    ZEBU::INDEX
                                    :END1
                                    ZEBU::NEW-INDEX)
                           (INCF ZEBU::INDEX 8)
                           (RETURN-FROM ZEBU::COMPARE NIL)))
                     (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                           ZEBU::INDEX)
                     (RETURN-FROM ZEBU::FINAL-RETURN T)))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))

(DEFUN TOK-IDENTIFICATEUR (STRING &OPTIONAL (ZEBU::START 0)
                           (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN (SETF ZEBU::*REGEX-GROUPINGS* 1)
               (BLOCK ZEBU::FINAL-RETURN
                 (BLOCK ZEBU::COMPARE
                   (LET ((ZEBU::INDEX ZEBU::START)
                         (LENGTH ZEBU::END))
                     (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                           (LIST ZEBU::INDEX NIL))
                     (LET ((ZEBU::NEW-INDEX (+ ZEBU::INDEX 16)))
                       (IF (< LENGTH ZEBU::NEW-INDEX)
                           (RETURN-FROM ZEBU::COMPARE NIL))
                       (IF (STRING= STRING
                                    "{IDENTIFICATEUR}"
                                    :START1
                                    ZEBU::INDEX
                                    :END1
                                    ZEBU::NEW-INDEX)
                           (INCF ZEBU::INDEX 16)
                           (RETURN-FROM ZEBU::COMPARE NIL)))
                     (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                           ZEBU::INDEX)
                     (RETURN-FROM ZEBU::FINAL-RETURN T)))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))

(DEFUN TOK-COMMENTAIRE (STRING &OPTIONAL (ZEBU::START 0)
                        (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN (SETF ZEBU::*REGEX-GROUPINGS* 1)
               (BLOCK ZEBU::FINAL-RETURN
                 (BLOCK ZEBU::COMPARE
                   (LET ((ZEBU::INDEX ZEBU::START)
                         (LENGTH ZEBU::END))
                     (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                           (LIST ZEBU::INDEX NIL))
                     (LET ((ZEBU::NEW-INDEX (+ ZEBU::INDEX 13)))
                       (IF (< LENGTH ZEBU::NEW-INDEX)
                           (RETURN-FROM ZEBU::COMPARE NIL))
                       (IF (STRING= STRING
                                    "{COMMENTAIRE}"
                                    :START1
                                    ZEBU::INDEX
                                    :END1
                                    ZEBU::NEW-INDEX)
                           (INCF ZEBU::INDEX 13)
                           (RETURN-FROM ZEBU::COMPARE NIL)))
                     (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                           ZEBU::INDEX)
                     (RETURN-FROM ZEBU::FINAL-RETURN T)))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))

(DEFUN TOK-ERREUR (STRING &OPTIONAL (ZEBU::START 0)
                   (ZEBU::END (LENGTH STRING)))
  (WHEN (PROGN (SETF ZEBU::*REGEX-GROUPINGS* 1)
               (BLOCK ZEBU::FINAL-RETURN
                 (BLOCK ZEBU::COMPARE
                   (LET ((ZEBU::INDEX ZEBU::START)
                         (LENGTH ZEBU::END))
                     (SETF (SVREF ZEBU::*REGEX-GROUPS* 0)
                           (LIST ZEBU::INDEX NIL))
                     (LET ((ZEBU::NEW-INDEX (+ ZEBU::INDEX 8)))
                       (IF (< LENGTH ZEBU::NEW-INDEX)
                           (RETURN-FROM ZEBU::COMPARE NIL))
                       (IF (STRING= STRING
                                    "{ERREUR}"
                                    :START1
                                    ZEBU::INDEX
                                    :END1
                                    ZEBU::NEW-INDEX)
                           (INCF ZEBU::INDEX 8)
                           (RETURN-FROM ZEBU::COMPARE NIL)))
                     (SETF (CADR (SVREF ZEBU::*REGEX-GROUPS* 0))
                           ZEBU::INDEX)
                     (RETURN-FROM ZEBU::FINAL-RETURN T)))))
    (SECOND (SVREF ZEBU::*REGEX-GROUPS* 0))))
