;;;; -*- mode:lisp;coding:utf-8 -*-
;;;;**************************************************************************
;;;;FILE:               test-lse-scanner.lisp
;;;;LANGUAGE:           Common-Lisp
;;;;SYSTEM:             Common-Lisp
;;;;USER-INTERFACE:     NONE
;;;;DESCRIPTION
;;;;
;;;;    Tests the LSE scanner.
;;;;
;;;;AUTHORS
;;;;    <PJB> Pascal J. Bourguignon <pjb@informatimago.com>
;;;;MODIFICATIONS
;;;;    2016-02-06 <PJB> Created.
;;;;BUGS
;;;;LEGAL
;;;;    AGPL3
;;;;
;;;;    Copyright Pascal J. Bourguignon 2012 - 2016
;;;;
;;;;    This program is free software: you can redistribute it and/or modify
;;;;    it under the terms of the GNU Affero General Public License as published by
;;;;    the Free Software Foundation, either version 3 of the License, or
;;;;    (at your option) any later version.
;;;;
;;;;    This program is distributed in the hope that it will be useful,
;;;;    but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;;    GNU Affero General Public License for more details.
;;;;
;;;;    You should have received a copy of the GNU Affero General Public License
;;;;    along with this program.  If not, see <http://www.gnu.org/licenses/>.
;;;;**************************************************************************
(eval-when (:compile-toplevel :load-toplevel :execute)
  (setf *readtable* (copy-readtable nil)))

(in-package "COM.INFORMATIMAGO.LSE")
(import '(com.informatimago.common-lisp.cesarum.simple-test:define-test
          com.informatimago.common-lisp.cesarum.simple-test:test))

(defun initialize-debugging-task ()
  (unless (and (eql *command-group* awake)
               *task*)
    (setf *command-group* awake
          *task* (make-instance
                  'task
                  :state :active
                  :case-insensitive t
                  :upcase-output nil
                  ;; :dectech nil
                  :unicode nil
                  :terminal (make-instance
                             'standard-terminal
                             :input-stream  (stream-input-stream  *terminal-io*)
                             :output-stream (stream-output-stream *terminal-io*))))))


(defun test-scan-stream (src)
  (loop
    :with scanner = (make-instance 'lse-scanner :source src :state 0)
    ;;  :initially (advance-line scanner)
    :for current-token :=  (scanner-current-token scanner)
    :do (format t "~2%;; ~A~%;; ~A~%"
                (scanner-buffer scanner)
                current-token)
        (format t "~&;;   ~3A ~20A ~20S ~3A ~3A ~20A ~A~%"
                (scanner-state scanner)
                (token-kind current-token)
                (token-text current-token)
                (eolp current-token)
                (eofp current-token)
                (scanner-previous-token-kind scanner)
                (type-of current-token))
        (if (eolp current-token)
            (progn
              (format t ";; Found new line~%")
              (advance-line scanner))
            (scan-next-token scanner))
        (finish-output)
    :until (eofp (scanner-current-token scanner))))

(defun test-scan-file (path)
  (with-open-file (src path)
    (test-scan-stream src)))

(defun test-scan-string (source)
  (with-input-from-string (src source)
    (test-scan-stream src)))


(defun stream-tokens (src)
  (loop
    :with scanner = (make-instance 'lse-scanner :source src :state 0)
    :collect (scanner-current-token scanner)
    :do (scan-next-token scanner)
    :until (eofp (scanner-current-token scanner))))

(defun file-tokens (path)
  (with-open-file (src path)
    (stream-tokens src)))

(defun string-tokens (source)
  (with-input-from-string (src source)
    (stream-tokens src)))




;; (initialize-debugging-task)
;; (test/scan-file #P"~/src/pjb/nasium-lse/SYNTERR.LSE")

(defparameter *test-tokens-source* "
1*BOURGUIGNON PASCAL 4*6 25-05-78
2*CEFAK
3*TRANSFORMATION DE DEGRES C EN DEGRES F ET K ET INVERSEMENT
4*
5*TOURNE
6 AFFICHER[25/]
8 CHAINE UNIT,
10 AFFICHER[/20X,'TRANSFORMATION DES DEGRES C EN DEGRES F ET K ET INVERSEMENT' ]
12 AFFICHER['NT',,/,'LORSQUE VOUS VERREZ APPARAITRE LE SIGNE \":\",TAPEZ']
14 AFFICHER[' LE NOMBRE',/,'DE DEGRES,UN BLANC,L''UNITE (C,F OU K) ET '234]
16 AFFICHER['SUR LES TOUCHES (CTRL X-OFF)',/,'EXEMPLE : 65.3 F(CTRL X-OFF)',/]
18 AFFICHER[/,'QUAND VOUS N''AUREZ PUS DE VALEURS A DONNER,TAPEZ \"FIN\" A LA']
20 AFFICHER['PLACE DE L''UNITE',/,'COMPRIS?'];LIRE UNIT
22 SI UNIT='NON' SINON ALLER EN 6
24 AFFICHER[/,10X,34'#',/,10X,'#',4X,'C*',4X,'#',4X,'F*',4X,'#',4X,'K*']
26 AFFICHER[/,4X,'#']
28 AFFICHER[/,10X,34'#',/]
30 AFFICHER[C,79X,C,10X,'#',10X,'#',10X,'#',10X,'#']
32 AFFICHER[X,':'];LIRE TEM;LIRE UNIT
34 SI UNIT#='C' ALORS &CFK(TEM)
36 SI UNIT=>'F' ALORS &FCK(TEM)
38 SI UNIT=<'K' ALORS &KCF(TEM)
40 SI UNIT='FIN' ALORS ALLER EN 44 ALORS ALLER EN 22
42 ALLER EN 30
44 AFFICHER[C,79X,C];TERMINER
50 PROCEDURE &CFK(C)
52 F_1.8*C+32;K_C+273.16
54 &AFF(C,F,K);RETOUR EN 28
58 PROCEDURE &FCK(F)
60 C_(F-32)/1.8;K_(F-32)/1.8+273.16
62 &AFF(C,F,K);RETOUR EN 28
66 PROCEDURE &KCF(F)
68 C_K-273.16;F_(K-273.16)*1.8+32
70 &AFF(C,F,K);RETOUR EN 28
74 PROCEDURE &AFF(C,F,K)
76 AFFICHER[C,79X,C,10X,'#',F5.2,2X,'#',F5.2,2X,'#',F5.2,2X,'#']C,F,K
78 RETOUR
")

(defparameter *test-tokens-expected*
  '((eol . #1="<END OF LINE>")
    (tok-numero . "1")
    (tok-commentaire . "*BOURGUIGNON PASCAL 4*6 25-05-78")
    (eol . #1#)
    (tok-numero . "2")
    (tok-commentaire . "*CEFAK")
    (eol . #1#)
    (tok-numero . "3")
    (tok-commentaire . "*TRANSFORMATION DE DEGRES C EN DEGRES F ET K ET INVERSEMENT")
    (eol . #1#)
    (tok-numero . "4")
    (tok-commentaire . "*")
    (eol . #1#)
    (tok-numero . "5")
    (tok-commentaire . "*TOURNE")
    (eol . #1#)
    (tok-numero . "6")
    (tok-afficher . "AFFICHER")
    (tok-crogauche . "[")
    (tok-numero . "25")
    (tok-divise . "/")
    (tok-crodroite . "]")
    (eol . #1#)
    (tok-numero . "8")
    (tok-chaine . "CHAINE")
    (tok-identificateur . "UNIT")
    (tok-virgule . ",")
    (eol . #1#)
    (tok-numero . "10")
    (tok-afficher . "AFFICHER")
    (tok-crogauche . "[")
    (tok-divise . "/")
    (tok-numero . "20")
    (tok-x . "X")
    (tok-virgule . ",")
    (tok-litchaine . "'TRANSFORMATION DES DEGRES C EN DEGRES F ET K ET INVERSEMENT'")
    (tok-crodroite . "]")
    (eol . #1#)
    (tok-numero . "12")
    (tok-afficher . "AFFICHER")
    (tok-crogauche . "[")
    (tok-litchaine . "'NT'")
    (tok-virgule . ",")
    (tok-virgule . ",")
    (tok-divise . "/")
    (tok-virgule . ",")
    (tok-litchaine . "'LORSQUE VOUS VERREZ APPARAITRE LE SIGNE \":\",TAPEZ'")
    (tok-crodroite . "]")
    (eol . #1#)
    (tok-numero . "14")
    (tok-afficher . "AFFICHER")
    (tok-crogauche . "[")
    (tok-litchaine . "' LE NOMBRE'")
    (tok-virgule . ",")
    (tok-divise . "/")
    (tok-virgule . ",")
    (tok-litchaine . "'DE DEGRES,UN BLANC,L''UNITE (C,F OU K) ET '")
    (tok-numero . "234")
    (tok-crodroite . "]")
    (eol . #1#)
    (tok-numero . "16")
    (tok-afficher . "AFFICHER")
    (tok-crogauche . "[")
    (tok-litchaine . "'SUR LES TOUCHES (CTRL X-OFF)'")
    (tok-virgule . ",")
    (tok-divise . "/")
    (tok-virgule . ",")
    (tok-litchaine . "'EXEMPLE : 65.3 F(CTRL X-OFF)'")
    (tok-virgule . ",")
    (tok-divise . "/")
    (tok-crodroite . "]")
    (eol . #1#)
    (tok-numero . "18")
    (tok-afficher . "AFFICHER")
    (tok-crogauche . "[")
    (tok-divise . "/")
    (tok-virgule . ",")
    (tok-litchaine . "'QUAND VOUS N''AUREZ PUS DE VALEURS A DONNER,TAPEZ \"FIN\" A LA'")
    (tok-crodroite . "]")
    (eol . #1#)
    (tok-numero . "20")
    (tok-afficher . "AFFICHER")
    (tok-crogauche . "[")
    (tok-litchaine . "'PLACE DE L''UNITE'")
    (tok-virgule . ",")
    (tok-divise . "/")
    (tok-virgule . ",")
    (tok-litchaine . "'COMPRIS?'")
    (tok-crodroite . "]")
    (tok-ptvirg . ";")
    (tok-lire . "LIRE")
    (tok-identificateur . "UNIT")
    (eol . #1#)
    (tok-numero . "22")
    (tok-si . "SI")
    (tok-identificateur . "UNIT")
    (tok-eq . "=")
    (tok-litchaine . "'NON'")
    (tok-sinon . "SINON")
    (tok-aller . "ALLER")
    (tok-en . "EN")
    (tok-numero . "6")
    (eol . #1#)
    (tok-numero . "24")
    (tok-afficher . "AFFICHER")
    (tok-crogauche . "[")
    (tok-divise . "/")
    (tok-virgule . ",")
    (tok-numero . "10")
    (tok-x . "X")
    (tok-virgule . ",")
    (tok-numero . "34")
    (tok-litchaine . "'#'")
    (tok-virgule . ",")
    (tok-divise . "/")
    (tok-virgule . ",")
    (tok-numero . "10")
    (tok-x . "X")
    (tok-virgule . ",")
    (tok-litchaine . "'#'")
    (tok-virgule . ",")
    (tok-numero . "4")
    (tok-x . "X")
    (tok-virgule . ",")
    (tok-litchaine . "'C*'")
    (tok-virgule . ",")
    (tok-numero . "4")
    (tok-x . "X")
    (tok-virgule . ",")
    (tok-litchaine . "'#'")
    (tok-virgule . ",")
    (tok-numero . "4")
    (tok-x . "X")
    (tok-virgule . ",")
    (tok-litchaine . "'F*'")
    (tok-virgule . ",")
    (tok-numero . "4")
    (tok-x . "X")
    (tok-virgule . ",")
    (tok-litchaine . "'#'")
    (tok-virgule . ",")
    (tok-numero . "4")
    (tok-x . "X")
    (tok-virgule . ",")
    (tok-litchaine . "'K*'")
    (tok-crodroite . "]")
    (eol . #1#)
    (tok-numero . "26")
    (tok-afficher . "AFFICHER")
    (tok-crogauche . "[")
    (tok-divise . "/")
    (tok-virgule . ",")
    (tok-numero . "4")
    (tok-x . "X")
    (tok-virgule . ",")
    (tok-litchaine . "'#'")
    (tok-crodroite . "]")
    (eol . #1#)
    (tok-numero . "28")
    (tok-afficher . "AFFICHER")
    (tok-crogauche . "[")
    (tok-divise . "/")
    (tok-virgule . ",")
    (tok-numero . "10")
    (tok-x . "X")
    (tok-virgule . ",")
    (tok-numero . "34")
    (tok-litchaine . "'#'")
    (tok-virgule . ",")
    (tok-divise . "/")
    (tok-crodroite . "]")
    (eol . #1#)
    (tok-numero . "30")
    (tok-afficher . "AFFICHER")
    (tok-crogauche . "[")
    (tok-c . "C")
    (tok-virgule . ",")
    (tok-numero . "79")
    (tok-x . "X")
    (tok-virgule . ",")
    (tok-c . "C")
    (tok-virgule . ",")
    (tok-numero . "10")
    (tok-x . "X")
    (tok-virgule . ",")
    (tok-litchaine . "'#'")
    (tok-virgule . ",")
    (tok-numero . "10")
    (tok-x . "X")
    (tok-virgule . ",")
    (tok-litchaine . "'#'")
    (tok-virgule . ",")
    (tok-numero . "10")
    (tok-x . "X")
    (tok-virgule . ",")
    (tok-litchaine . "'#'")
    (tok-virgule . ",")
    (tok-numero . "10")
    (tok-x . "X")
    (tok-virgule . ",")
    (tok-litchaine . "'#'")
    (tok-crodroite . "]")
    (eol . #1#)
    (tok-numero . "32")
    (tok-afficher . "AFFICHER")
    (tok-crogauche . "[")
    (tok-x . "X")
    (tok-virgule . ",")
    (tok-litchaine . "':'")
    (tok-crodroite . "]")
    (tok-ptvirg . ";")
    (tok-lire . "LIRE")
    (tok-identificateur . "TEM")
    (tok-ptvirg . ";")
    (tok-lire . "LIRE")
    (tok-identificateur . "UNIT")
    (eol . #1#)
    (tok-numero . "34")
    (tok-si . "SI")
    (tok-identificateur . "UNIT")
    (tok-ne . "#")
    (tok-eq . "=")
    (tok-litchaine . "'C'")
    (tok-alors . "ALORS")
    (tok-procident . "&CFK")
    (tok-pargauche . "(")
    (tok-identificateur . "TEM")
    (tok-pardroite . ")")
    (eol . #1#)
    (tok-numero . "36")
    (tok-si . "SI")
    (tok-identificateur . "UNIT")
    (tok-eq . "=")
    (tok-gt . ">")
    (tok-litchaine . "'F'")
    (tok-alors . "ALORS")
    (tok-procident . "&FCK")
    (tok-pargauche . "(")
    (tok-identificateur . "TEM")
    (tok-pardroite . ")")
    (eol . #1#)
    (tok-numero . "38")
    (tok-si . "SI")
    (tok-identificateur . "UNIT")
    (tok-eq . "=")
    (tok-lt . "<")
    (tok-litchaine . "'K'")
    (tok-alors . "ALORS")
    (tok-procident . "&KCF")
    (tok-pargauche . "(")
    (tok-identificateur . "TEM")
    (tok-pardroite . ")")
    (eol . #1#)
    (tok-numero . "40")
    (tok-si . "SI")
    (tok-identificateur . "UNIT")
    (tok-eq . "=")
    (tok-litchaine . "'FIN'")
    (tok-alors . "ALORS")
    (tok-aller . "ALLER")
    (tok-en . "EN")
    (tok-numero . "44")
    (tok-alors . "ALORS")
    (tok-aller . "ALLER")
    (tok-en . "EN")
    (tok-numero . "22")
    (eol . #1#)
    (tok-numero . "42")
    (tok-aller . "ALLER")
    (tok-en . "EN")
    (tok-numero . "30")
    (eol . #1#)
    (tok-numero . "44")
    (tok-afficher . "AFFICHER")
    (tok-crogauche . "[")
    (tok-c . "C")
    (tok-virgule . ",")
    (tok-numero . "79")
    (tok-x . "X")
    (tok-virgule . ",")
    (tok-c . "C")
    (tok-crodroite . "]")
    (tok-ptvirg . ";")
    (tok-terminer . "TERMINER")
    (eol . #1#)
    (tok-numero . "50")
    (tok-procedure . "PROCEDURE")
    (tok-procident . "&CFK")
    (tok-pargauche . "(")
    (tok-identificateur . "C")
    (tok-pardroite . ")")
    (eol . #1#)
    (tok-numero . "52")
    (tok-identificateur . "F")
    (tok-fleche . "_")
    (tok-nombre . "1.8")
    (tok-fois . "*")
    (tok-identificateur . "C")
    (tok-plus . "+")
    (tok-numero . "32")
    (tok-ptvirg . ";")
    (tok-identificateur . "K")
    (tok-fleche . "_")
    (tok-identificateur . "C")
    (tok-plus . "+")
    (tok-nombre . "273.16")
    (eol . #1#)
    (tok-numero . "54")
    (tok-procident . "&AFF")
    (tok-pargauche . "(")
    (tok-identificateur . "C")
    (tok-virgule . ",")
    (tok-identificateur . "F")
    (tok-virgule . ",")
    (tok-identificateur . "K")
    (tok-pardroite . ")")
    (tok-ptvirg . ";")
    (tok-retour . "RETOUR")
    (tok-en . "EN")
    (tok-numero . "28")
    (eol . #1#)
    (tok-numero . "58")
    (tok-procedure . "PROCEDURE")
    (tok-procident . "&FCK")
    (tok-pargauche . "(")
    (tok-identificateur . "F")
    (tok-pardroite . ")")
    (eol . #1#)
    (tok-numero . "60")
    (tok-identificateur . "C")
    (tok-fleche . "_")
    (tok-pargauche . "(")
    (tok-identificateur . "F")
    (tok-moins . "-")
    (tok-numero . "32")
    (tok-pardroite . ")")
    (tok-divise . "/")
    (tok-nombre . "1.8")
    (tok-ptvirg . ";")
    (tok-identificateur . "K")
    (tok-fleche . "_")
    (tok-pargauche . "(")
    (tok-identificateur . "F")
    (tok-moins . "-")
    (tok-numero . "32")
    (tok-pardroite . ")")
    (tok-divise . "/")
    (tok-nombre . "1.8")
    (tok-plus . "+")
    (tok-nombre . "273.16")
    (eol . #1#)
    (tok-numero . "62")
    (tok-procident . "&AFF")
    (tok-pargauche . "(")
    (tok-identificateur . "C")
    (tok-virgule . ",")
    (tok-identificateur . "F")
    (tok-virgule . ",")
    (tok-identificateur . "K")
    (tok-pardroite . ")")
    (tok-ptvirg . ";")
    (tok-retour . "RETOUR")
    (tok-en . "EN")
    (tok-numero . "28")
    (eol . #1#)
    (tok-numero . "66")
    (tok-procedure . "PROCEDURE")
    (tok-procident . "&KCF")
    (tok-pargauche . "(")
    (tok-identificateur . "F")
    (tok-pardroite . ")")
    (eol . #1#)
    (tok-numero . "68")
    (tok-identificateur . "C")
    (tok-fleche . "_")
    (tok-identificateur . "K")
    (tok-moins . "-")
    (tok-nombre . "273.16")
    (tok-ptvirg . ";")
    (tok-identificateur . "F")
    (tok-fleche . "_")
    (tok-pargauche . "(")
    (tok-identificateur . "K")
    (tok-moins . "-")
    (tok-nombre . "273.16")
    (tok-pardroite . ")")
    (tok-fois . "*")
    (tok-nombre . "1.8")
    (tok-plus . "+")
    (tok-numero . "32")
    (eol . #1#)
    (tok-numero . "70")
    (tok-procident . "&AFF")
    (tok-pargauche . "(")
    (tok-identificateur . "C")
    (tok-virgule . ",")
    (tok-identificateur . "F")
    (tok-virgule . ",")
    (tok-identificateur . "K")
    (tok-pardroite . ")")
    (tok-ptvirg . ";")
    (tok-retour . "RETOUR")
    (tok-en . "EN")
    (tok-numero . "28")
    (eol . #1#)
    (tok-numero . "74")
    (tok-procedure . "PROCEDURE")
    (tok-procident . "&AFF")
    (tok-pargauche . "(")
    (tok-identificateur . "C")
    (tok-virgule . ",")
    (tok-identificateur . "F")
    (tok-virgule . ",")
    (tok-identificateur . "K")
    (tok-pardroite . ")")
    (eol . #1#)
    (tok-numero . "76")
    (tok-afficher . "AFFICHER")
    (tok-crogauche . "[")
    (tok-c . "C")
    (tok-virgule . ",")
    (tok-numero . "79")
    (tok-x . "X")
    (tok-virgule . ",")
    (tok-c . "C")
    (tok-virgule . ",")
    (tok-numero . "10")
    (tok-x . "X")
    (tok-virgule . ",")
    (tok-litchaine . "'#'")
    (tok-virgule . ",")
    (tok-f . "F")
    (tok-numero . "5")
    (tok-point . ".")
    (tok-numero . "2")
    (tok-virgule . ",")
    (tok-numero . "2")
    (tok-x . "X")
    (tok-virgule . ",")
    (tok-litchaine . "'#'")
    (tok-virgule . ",")
    (tok-f . "F")
    (tok-numero . "5")
    (tok-point . ".")
    (tok-numero . "2")
    (tok-virgule . ",")
    (tok-numero . "2")
    (tok-x . "X")
    (tok-virgule . ",")
    (tok-litchaine . "'#'")
    (tok-virgule . ",")
    (tok-f . "F")
    (tok-numero . "5")
    (tok-point . ".")
    (tok-numero . "2")
    (tok-virgule . ",")
    (tok-numero . "2")
    (tok-x . "X")
    (tok-virgule . ",")
    (tok-litchaine . "'#'")
    (tok-crodroite . "]")
    (tok-identificateur . "C")
    (tok-virgule . ",")
    (tok-identificateur . "F")
    (tok-virgule . ",")
    (tok-identificateur . "K")
    (eol . #1#)
    (tok-numero . "78")
    (tok-retour . "RETOUR")
    (eol . #1#)))



(defun equal-sexps (a b)
  (cond
    ((null a) (null b))
    ((atom a) (equal a b))
    (t (and (equal-sexps (car a) (car b))
            (equal-sexps (cdr a) (cdr b))))))


(define-test test/scanner/comment-empty ()
  (initialize-debugging-task)
  (let ((tokens (string-tokens "18*")))
    (test equalp
          (mapcar (function token-kind) tokens)
          '(tok-numero tok-commentaire eol))
    (test equal-sexps
          (mapcar 'token-text tokens)
          '("18" "*" "<END OF LINE>"))))

(define-test test/scanner/tokens ()
  (initialize-debugging-task)
  (let ((tokens (string-tokens *test-tokens-source*))
        (results))
    (test equal-sexps
          (mapcar (lambda (token)
                    (cons (token-kind token)
                          (token-text token)))
                  (string-tokens *test-tokens-source*))
          *test-tokens-expected*)))

(define-test test/all ()
  (test/scanner/comment-empty)
  (test/scanner/tokens))


;;;; THE END ;;;;
